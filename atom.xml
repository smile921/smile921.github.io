<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关注网络安全动态，追求心中的向往</title>
  <subtitle>迈入新世界，培养独当一面的 Web 前端工程师！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://smile921.github.io/"/>
  <updated>2017-03-14T02:09:56.202Z</updated>
  <id>http://smile921.github.io/</id>
  
  <author>
    <name>Smile921</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于以太坊的智能合约开发入门</title>
    <link href="http://smile921.github.io/201703%E5%9F%BA%E4%BA%8E%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"/>
    <id>http://smile921.github.io/201703基于以太坊的智能合约开发入门/</id>
    <published>2017-03-13T08:49:23.000Z</published>
    <updated>2017-03-14T02:09:56.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于以太坊的智能合约开发入门"><a href="#基于以太坊的智能合约开发入门" class="headerlink" title="基于以太坊的智能合约开发入门"></a>基于以太坊的智能合约开发入门</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p> 现在我选择这里 Ubuntu 16.10 LTS 版本</p>
<ul>
<li>安装nodejs 环境 (通过apt-get 安装的默认是nodejs 4.2.6) 建议安装官网较新的版本</li>
<li><p>接着修改registry地址 为淘宝镜像或者其他国内镜像可以加速包安装过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config set registry https://registry.npm.taobao.org </div><div class="line">npm info underscore （如果上面配置正确这个命令会有字符串response）</div></pre></td></tr></table></figure>
</li>
<li><p>可选安装yarn 一个号称能比npm更快的包管理工具 ( npm install -g yarn )</p>
</li>
<li>如果不是安装的最新的nodejs 可以用下面的方法升级( npm install -g n &amp;&amp; n stable )</li>
<li>接下来安装 truffle ( npm install -g truffle 或者使用yarn 安装 yarn global add truffle  )</li>
<li>安装 testrpc 或者 geth ( 开发测试可以直接安装 testrpc  npm install -g testrpc ; yarn global add testrpc )</li>
<li>安装 solc 用web3js 可以生成 abi文件和bin文件 ( npm install -g solc ; yarn global add solc )</li>
<li><p>下载安装web3j wapper tool <a href="https://github.com/web3j/web3j/releases/download/v2.1.0/web3j-2.1.0.zip" target="_blank" rel="external">web3j tool</a><br>解压即可使用 bin/web3j solidity generate … …</p>
<p>npm 和yarn命令转换cheat sheet<br><img src="/images/blockchain-00.jpg" alt="image"></p>
</li>
</ul>
<h2 id="使用truffle-初始化项目，并编写智能合约，生成智能合约abi文件和bin文件等"><a href="#使用truffle-初始化项目，并编写智能合约，生成智能合约abi文件和bin文件等" class="headerlink" title="使用truffle 初始化项目，并编写智能合约，生成智能合约abi文件和bin文件等"></a>使用truffle 初始化项目，并编写智能合约，生成智能合约abi文件和bin文件等</h2><ul>
<li><p>初始化项目 truffle-demo ( mkdir truffle-demo &amp;&amp; cd truffle &amp;&amp; truffle init )</p>
<p><img src="/images/blockchain-01.png" alt="image"><br><img src="/images/blockchain-02.png" alt="image"></p>
</li>
<li>编写智能合约，并编译  ( truffle compile )<br><img src="/images/blockchain-02.png" alt="image"><br><img src="/images/blockchain-05.png" alt="image"></li>
<li>启动区块链测试环境 testrpc<br><img src="/images/blockchain-04.jpg" alt="image"></li>
<li><p>修改配置文件 truffle.js 的host为127.0.0.1或者localhost ，端口按testrpc提示修改</p>
</li>
<li><p>修改migration目录下的migrate 文件 执行 ( truffle migrate )<br><img src="/images/blockchain-06.png" alt="image"><br><img src="/images/blockchain-07.png" alt="image"><br><img src="/images/blockchain-08.png" alt="image"></p>
</li>
<li>truffle console 进入控制台进行简单验证<br><img src="/images/blockchain-13.png" alt="image"><br><img src="/images/blockchain-14.png" alt="image"><br><img src="/images/blockchain-15.png" alt="image"></li>
<li><p>truffle build 编译</p>
</li>
<li><p>truffle publish 发布</p>
</li>
<li><p>truffle networks 发布<br><img src="/images/blockchain-09.png" alt="image"></p>
</li>
<li>导出abi文件和bin文件 ( solcjs contracts/ConvertLib.sol –abi –bin –optimize -o build/ –verbose  )<br><img src="/images/blockchain-12.png" alt="image"><br><img src="/images/blockchain-10.png" alt="image"></li>
<li>导出abi文件和bin文件 ( web3j solidity generate xxx.bin xxx.abi -p com.xxx.smart.contracs -o outputdir )<br> 注意参数有先后顺序，先xxx.bin 再xxx.abi 反了会报错的<br><img src="/images/blockchain-17.png" alt="image"><br><img src="/images/blockchain-18.png" alt="image"><br><img src="/images/blockchain-19.png" alt="image"><br><img src="/images/blockchain-20.png" alt="image"></li>
</ul>
<h2 id="TODO-TBD"><a href="#TODO-TBD" class="headerlink" title="TODO TBD"></a>TODO TBD</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于以太坊的智能合约开发入门&quot;&gt;&lt;a href=&quot;#基于以太坊的智能合约开发入门&quot; class=&quot;headerlink&quot; title=&quot;基于以太坊的智能合约开发入门&quot;&gt;&lt;/a&gt;基于以太坊的智能合约开发入门&lt;/h1&gt;&lt;h2 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;#环
    
    </summary>
    
    
      <category term="笔记" scheme="http://smile921.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="truffle" scheme="http://smile921.github.io/tags/truffle/"/>
    
      <category term="web3j" scheme="http://smile921.github.io/tags/web3j/"/>
    
  </entry>
  
  <entry>
    <title>mongodb 3.4.x 入门笔记</title>
    <link href="http://smile921.github.io/201703mongodb%20%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://smile921.github.io/201703mongodb 实战笔记/</id>
    <published>2017-03-09T08:49:23.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> 现在我选择这里 <a href="https://www.mongodb.com/download-center/enterprise/releases" target="_blank" rel="external">https://www.mongodb.com/download-center/enterprise/releases</a> </p>
<h3 id="linux-更简单快捷的方式-centos-或者-redhat"><a href="#linux-更简单快捷的方式-centos-或者-redhat" class="headerlink" title="linux 更简单快捷的方式 centos 或者 redhat"></a>linux 更简单快捷的方式 centos 或者 redhat</h3><p>   <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-red-hat/" target="_blank" rel="external">参考这里</a></p>
<p>   创建repo文件   /etc/yum.repos.d/mongodb-enterprise.repo  直接用yum安装mongodb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[mongodb-enterprise]</div><div class="line">name=MongoDB Enterprise Repository</div><div class="line">baseurl=https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/3.4/$basearch/</div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</div></pre></td></tr></table></figure></p>
<p>最后执行 yum install -y mongodb-enterprise</p>
<h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>   mongodb 默认的配置文件在 /etc/mongod.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"># mongod.conf</div><div class="line"></div><div class="line"># for documentation of all options, see:</div><div class="line">#   http://docs.mongodb.org/manual/reference/configuration-options/</div><div class="line"></div><div class="line"># where to write logging data.</div><div class="line">systemLog:</div><div class="line">  destination: file</div><div class="line">  logAppend: true</div><div class="line">  path: /home/mongodb/mongo/log/mongod.log</div><div class="line"></div><div class="line"># Where and how to store data.</div><div class="line">dbpath=/home/mongodb/mongo/data/db</div><div class="line">storage:</div><div class="line">  dbPath: /home/mongodb/mongo/data</div><div class="line">  journal:</div><div class="line">    enabled: true</div><div class="line">#  engine:</div><div class="line">#  mmapv1:</div><div class="line">#  wiredTiger:</div><div class="line"></div><div class="line"># how the process runs</div><div class="line">processManagement:</div><div class="line">  fork: true  # fork and run in background</div><div class="line">  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile</div><div class="line"></div><div class="line"># network interfaces</div><div class="line">net:</div><div class="line">  port: 27017</div><div class="line">  #bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.</div><div class="line">  enabled: true</div><div class="line">  JSONPEnabled: true</div><div class="line">  RESTInterfaceEnabled: true</div><div class="line"></div><div class="line"></div><div class="line">#security:</div><div class="line"></div><div class="line">#operationProfiling:</div><div class="line"></div><div class="line">#replication:</div><div class="line"></div><div class="line">#sharding:</div><div class="line"></div><div class="line">## Enterprise-Only Options</div><div class="line"></div><div class="line">#auditLog:</div><div class="line"></div><div class="line">#snmp:</div></pre></td></tr></table></figure></p>
<p>比如要启动一个单节点的mongod实例<br>可以这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">dbpath=/home/mongodb/mongo/data/db/</div><div class="line">logpath=/home/mongodb/mongo/data/log</div><div class="line">maxConns=100</div><div class="line">logRotate=rename</div><div class="line">pidfilepath=/home/mongodb/mongo/data/mongo.pid</div><div class="line">httpinterface=on</div><div class="line">auth=true</div><div class="line">rest=true</div><div class="line">jsonp=true</div><div class="line">noprealloc=true</div><div class="line">smallfiles=true</div><div class="line">directoryperdb=true</div><div class="line">nounixsocket=true</div><div class="line">port=27017</div><div class="line">fork=true</div></pre></td></tr></table></figure></p>
<p>然后 mongod -f mongod.conf<br>这事启动是带有认证的</p>
<p>需要正常使用则应该先了解 <a href="https://docs.mongodb.com/manual/core/security-built-in-roles/" target="_blank" rel="external">内置role介绍</a><br>   mongo 127.0.0.1:27017/admin<br>   db.createUser({user:’adminxxx’,pwd:’passwordxxx’,roles:[‘root’]});<br>   db.auth(‘username’,’password’);<br>   然后创建普通用户<br>   需要 </p>
<p>   db.createUser({user:’zjexxxx’,pwd:’passwordxxx’,roles:[{role:’dbOwner’,db:’yourdbname’]});<br>   db.auth(‘username’,’password’);<br>   use yourdbname;<br>   就可以操作数据库了</p>
<p>   使用其他客户端 比如 mongoimport 导入csv我文件<br>   mongoimport –authenticationDatabase admin -u ‘username’ -p ‘password’ -d  SH_stock -c 600000 –type=csv –fields=’a1.string’,’a2.string’,’a3.double’,’a4.double’,’a5.double’,’a6.double’,’a7.int64’,’a8.double’ –file=./SH#600000.csv </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt; 现在我选择这里 &lt;a href=&quot;https://www.mongodb.com/download-center/enterprise/r
    
    </summary>
    
    
      <category term="mongodb" scheme="http://smile921.github.io/tags/mongodb/"/>
    
      <category term="mongo" scheme="http://smile921.github.io/tags/mongo/"/>
    
      <category term="笔记" scheme="http://smile921.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>spaceemacs 学习笔记</title>
    <link href="http://smile921.github.io/201611spaceemacs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://smile921.github.io/201611spaceemacs-学习笔记/</id>
    <published>2016-11-01T05:45:31.000Z</published>
    <updated>2017-03-13T05:49:30.797Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>gg moves to the beginning of the buffer.<br>G  moves to the end of the buffer.<br>:  followed by a line number the <enter> moves to that line number .</enter></p>
<ol>
<li><p>typing / followed by a pharse searches FORWARD for the pharse.<br>typing ? followed by a pharse searches BACKWORD for the pharse.<br>After a search type n to find the next occurrence in the same direction<br>or N to search in the opposite direction.</p>
</li>
<li><p>typing % while the cursor is on a(,),[,],{,or} locates its matching pair.</p>
</li>
<li><p>To substitute new for the first old on a line type :s/old/new<br>To substitute new for all ‘old’s on a line type    :s/old/new/g<br>To substitute phrases between two line #’s type    :#,#s/old/new/g<br>To substitute all occurrences in the file type     :%s/old/new/g<br>To ask for confirmation each time add ‘c’          :%s/old/new/gc</p>
</li>
<li><p>To save part of a file type  :#,# w filename</p>
</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;gg moves to the beginning of the buffer.&lt;br&gt;G  moves to the end of the buffer.&lt;br&gt;:  followed by a line number the &lt;enter&gt; moves
    
    </summary>
    
    
      <category term="emacs" scheme="http://smile921.github.io/tags/emacs/"/>
    
      <category term="spcaemacs" scheme="http://smile921.github.io/tags/spcaemacs/"/>
    
      <category term="note" scheme="http://smile921.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Why is char[] preferred over String for passwords in Java?</title>
    <link href="http://smile921.github.io/201610Why-is-char-preferred-over-String-for-passwords-in-Java/"/>
    <id>http://smile921.github.io/201610Why-is-char-preferred-over-String-for-passwords-in-Java/</id>
    <published>2016-10-09T01:05:18.000Z</published>
    <updated>2017-03-13T05:49:30.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-is-char-preferred-over-String-for-passwords-in-Java"><a href="#Why-is-char-preferred-over-String-for-passwords-in-Java" class="headerlink" title="Why is char[] preferred over String for passwords in Java?"></a>Why is char[] preferred over String for passwords in Java?</h2><p> <a href="http://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords-in-java?rq=1" target="_blank" rel="external">来自 stackoverflow 的一个热门讨论</a><br> In Swing, the password field has a getPassword() (returns char[]) method instead of the usual getText() (returns String) method. Similarly, I have come across a suggestion not to use String to handle passwords.</p>
<p>Why does String pose a threat to security when it comes to passwords? It feels inconvenient to use char[]</p>
<h3 id="ans1"><a href="#ans1" class="headerlink" title="ans1"></a>ans1</h3><ul>
<li>Strings are immutable. That means once you’ve created the string, if another process can dump memory, there’s no way (aside from reflection) you can get rid of the data before garbage collection kicks in.</li>
</ul>
<p>With an array, you can explicitly wipe the data after you’re done with it. You can overwrite the array with anything you like, and the password won’t be present anywhere in the system, even before garbage collection.</p>
<p>So yes, this is a security concern - but even using char[] only reduces the window of opportunity for an attacker, and it’s only for this specific type of attack.</p>
<p>As noted in comments, it’s possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the garbage collector may clear all memory as it goes, to avoid this sort of thing. Even if it does, there’s still the time during which the char[] contains the actual characters as an attack window.</p>
<h3 id="ans2"><a href="#ans2" class="headerlink" title="ans2"></a>ans2</h3><p>While other suggestions here seem valid, there is one other good reason. With plain String you have much higher chances of accidentally printing the password to logs, monitors or some other insecure place. char[] is less vulnerable.</p>
<p>Consider this:</p>
<blockquote>
<p>public static void main(String[] args) {<br>   Object pw = “Password”;<br>   System.out.println(“String: “ + pw);</p>
<p>   pw = “Password”.toCharArray();<br>   System.out.println(“Array: “ + pw);<br>}<br>Prints:</p>
<p>String: Password<br>Array: [C@5829428e</p>
</blockquote>
<h3 id="ans3"><a href="#ans3" class="headerlink" title="ans3"></a>ans3</h3><p>To quote an official document, the Java Cryptography Architecture guide says this about char[] vs. String passwords (about password-based encryption, but this is more generally about passwords of course):</p>
<blockquote>
<p>It would seem logical to collect and store the password in an object of type java.lang.String. However, here’s the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change (overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for storing security sensitive information such as user passwords. You should always collect and store security sensitive information in a  char array instead.<br>Guideline 2-2 of the Secure Coding Guidelines for the Java Programming Language, Version 4.0 also says something similar (although it is originally in the context of logging):</p>
</blockquote>
<p>Guideline 2-2: Do not log highly sensitive information</p>
<blockquote>
<p>Some information, such as Social Security numbers (SSNs) and passwords, is highly sensitive. This information should not be kept for longer than necessary nor where it may be seen, even by administrators. For instance, it should not be sent to log files and its presence should not be detectable through searches. Some transient data may be kept in mutable data structures, such as char arrays, and cleared immediately after use. Clearing data structures has reduced effectiveness on typical Java runtime systems as objects are moved in memory transparently to the programmer.</p>
<p>This guideline also has implications for implementation and use of lower-level libraries that do not have semantic knowledge of the data they are dealing with. As an example, a low-level string parsing library may log the text it works on. An application may parse an SSN with the library. This creates a situation where the SSNs are available to administrators with access to the log files.</p>
</blockquote>
<h3 id="ans4"><a href="#ans4" class="headerlink" title="ans4"></a>ans4</h3><p>Character arrays (char[]) can be cleared after use by setting each character to zero and Strings not. If someone can somehow see the memory image, they can see a password in plain text if Strings are used, but if char[] is used, after purging data with 0’s, the password is secure.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-is-char-preferred-over-String-for-passwords-in-Java&quot;&gt;&lt;a href=&quot;#Why-is-char-preferred-over-String-for-passwords-in-Java&quot; class=&quot;h
    
    </summary>
    
    
      <category term="java" scheme="http://smile921.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Chromium 命令行启动参数 </title>
    <link href="http://smile921.github.io/201609Chromium-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/"/>
    <id>http://smile921.github.io/201609Chromium-命令行启动参数/</id>
    <published>2016-09-18T07:33:17.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chromium命令行启动参数"><a href="#Chromium命令行启动参数" class="headerlink" title="Chromium命令行启动参数"></a>Chromium命令行启动参数</h2><p>说明<br>常用命令行启动参数列表<br>如何使用这些参数<br>说明</p>
<p>这个页面列出了一些常用的命令行启动参数以及对它们的简要说明。说明中括号里的内容为译者注。</p>
<p>对于选项页 ( chrome://settings/ ) 或实验页 ( chrome://flags/ ) 已明确给出可视选项的参数，本列表不再包含。</p>
<p>更新更全的列表可以参考这里（英文，约500条，每日更新） <a href="http://peter.sh/experiments/chromium-command-line-switches/" target="_blank" rel="external">http://peter.sh/experiments/chromium-command-line-switches/</a></p>
<p>这些参数的使用方法见本文末尾。</p>
<p>常用命令行启动参数列表</p>
<p>序号 参数 说明<br>1 –allow-outdated-plugins 不停用过期的插件。<br>2 –allow-running-insecure-content 默认情况下，https 页面不允许从 http 链接引用 javascript/css/plug-ins。添加这一参数会放行这些内容。<br>3 –allow-scripting-gallery 允许拓展脚本在官方应用中心生效。默认情况下，出于安全因素考虑这些脚本都会被阻止。<br>4 –disable-accelerated-2d-canvas 停用 GPU 加速二维画布。<br>5 –disable-accelerated-video 停用 GPU 加速视频。<br>6 –disable-dart 停用 Dart。<br>7 –disable-desktop-notifications 禁用桌面通知，在 Windows 中桌面通知默认是启用的。<br>8 –disable-extensions 禁用拓展。<br>9 –disable-file-system 停用 FileSystem API。（注意一些拓展如 Adblock Plus for Google Chrome™ 依赖此 API 运行）<br>10 –disable-java 停用 Java。<br>11 –disable-local-storage 禁用 LocalStorage。<br>12 –disable-preconnect 停用 TCP/IP 预连接。<br>13 –disable-remote-fonts 关闭远程字体支持。SVG 中字体不受此参数影响。<br>14 –disable-speech-input 停用语音输入。<br>15 –disable-sync 停用同步功能。<br>16 –disable-ssl3 停用 SSL v3。<br>17 –disable-web-security 不强制遵守同源策略，供网站开发人员测试站点使用。<br>18 –disk-cache-dir 将缓存设置在给定的路径。<br>19 –disk-cache-size 设置缓存大小上限，以字节为单位。<br>20 –dns-prefetch-disable 停用DNS预读。<br>21 –enable-print-preview 启用打印预览。<br>22 –extensions-update-frequency 设定拓展自动更新频率，以秒为单位。<br>23 –incognito 让浏览器直接以隐身模式启动。<br>24 –keep-alive-for-test 最后一个标签关闭后仍保持浏览器进程。（某种意义上可以提高热启动速度，不过你最好得有充足的内存）<br>25 –kiosk 启用kiosk模式。（一种类似于全屏的浏览模式）<br>26 –lang 使用指定的语言。<br>27 –no-displaying-insecure-content 默认情况下，https 页面允许从 http 链接引用图片/字体/框架。添加这一参数会阻止这些内容。<br>28 –no-first-run 跳过 Chromium 首次运行检查。<br>29 –no-referrers 不发送 Http-Referer 头。<br>30 –no-sandbox 彻底停用沙箱。<br>31 –no-startup-window 启动时不建立窗口。<br>32 –proxy-pac-url 使用给定 URL 的 pac 代理脚本。（也可以使用本地文件，如 –proxy-pac-url=”file:\\c:\proxy.pac”）<br>33 –proxy-server 使用给定的代理服务器，这个参数只对 http 和 https 有效。（例如 –proxy-server=127.0.0.1:8087 ）<br>34 –show-component-extension-options 让自带的拓展组件显示在 chrome://settings/extensions 里。（目前有一个 “Bookmark Manager 0.1″）<br>35 –single-process 以单进程模式运行 Chromium。（启动时浏览器会给出不安全警告）<br>36 –skip-gpu-data-loading 跳过启动时的 GPU 信息收集、黑名单读取与黑名单自动更新，这样一来，所有的 GPU 功能都可供使用，并且 about:gpu 页面会显示空白。此参数仅供测试使用。<br>37 –start-maximized 启动时最大化。<br>38 –touch-optimized-ui 使用对触屏更友好的用户界面。（目前来看似乎只是把一些字体放大了）<br>39 –user-agent 使用给定的 User-Agent 字符串。<br>如何使用这些参数</p>
<p>可以参考 Chromium 团队的这个说明（英文） <a href="http://www.chromium.org/developers/how-tos/run-chromium-with-flags" target="_blank" rel="external">http://www.chromium.org/developers/how-tos/run-chromium-with-flags</a></p>
<p>对于 Windows 系统，简单来说就是：</p>
<p>在快捷方式上右键，选择属性。<br>选择“快捷方式”标签。<br>在“目标”一行的末尾，添加上启动参数。<br>最终效果应该像这样： ……\chrome.exe –first-switch –second-switch</p>
<p>加上命令行选项：–kiosk即可。</p>
<p>发现另外一个option也可以：–app=<url>。这个option也是启动全屏，而且会自动打开指定的URL。</url></p>
<p>经过不懈的查找，终于在stackoverflow上找到一个人的帖子，描述了他用一种奇怪的方法来解决这个问题，也就是chrome的kiosk模式和kiosk printing模式。当浏览器启动的时候，在后面加上–kiosk –kiosk-printing的参数，就能进入该模式，在该模式下，除了页面内容之外，其他的诸如地址栏，工具栏按钮神马的，都不见了，并且只能通过ALT F4来关闭。我猜想这个模式是给展示用的，比如某些特殊的场合。这个模式有一个好处，就是打印的时候不需要二次确认，这个也好理解，比如你做了一个自动售票的页面，出票机就是你的打印机，你在页面上点击一下出票，立刻票就从打印机里出来了，不需要出打印机的设置框。</p>
<p>通过这种方式打开页面，就能全屏并且打印不需要确认了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Chromium命令行启动参数&quot;&gt;&lt;a href=&quot;#Chromium命令行启动参数&quot; class=&quot;headerlink&quot; title=&quot;Chromium命令行启动参数&quot;&gt;&lt;/a&gt;Chromium命令行启动参数&lt;/h2&gt;&lt;p&gt;说明&lt;br&gt;常用命令行启动参数列表&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>目前比较流行的Python科学计算发行版</title>
    <link href="http://smile921.github.io/201609%E7%9B%AE%E5%89%8D%E6%AF%94%E8%BE%83%E6%B5%81%E8%A1%8C%E7%9A%84Python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%8F%91%E8%A1%8C%E7%89%88/"/>
    <id>http://smile921.github.io/201609目前比较流行的Python科学计算发行版/</id>
    <published>2016-09-18T04:27:50.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><pre><code>[Anaconda ](https://www.continuum.io/downloads)
这个是新起之秀，就今年已更新多次了，目前的版本是2.3.0。包管理使用conda，GUI基于PySide，
所有的包基本上都是最新版，没有PyQt和wxpython等，容量适中，但该有的科学计算包都有：
numpy，sicpy，matplotlib，spyder.....，目前我的CenTOS系统服务器安装的就是这个。
Linux系统里面,Anaconda安装、更新和删除都很方便,且所有的东西都只安装在一个目录中
/home/wxp/anaconda/,这点比下面的Canopy要好得多.Anaconda的开发和维护中有Python创始
人和社区的核心成员，可以想象这个发行包肯定会&quot;后来居上&quot;！Anaconda目前提供Python 2.6.9,
Python 2.7.X和Python 3.4.X三个系列发行包，这也是其他发行版所望尘莫及的。因此在各种操作
系统中，无论是Linux，还是Windows，又或是Mac，我都强烈推荐Anaconda！
</code></pre><h2 id="Enthought-Canopy-（Enthought-Python-Distribution）"><a href="#Enthought-Canopy-（Enthought-Python-Distribution）" class="headerlink" title="Enthought Canopy （Enthought Python Distribution）"></a>Enthought Canopy （Enthought Python Distribution）</h2><pre><code>[Enthought Python Distribution](https://store.enthought.com/downloads/)
Enthought目前的版本是1.7.4. GUI基于wxpython,包含PySide,但不包括PyQt. WxPython使用起来是
比较方便，但是远没有PyQt和PySide流行，需要使用PyQt的可以自己安装。Canopy有自己的集成开发
环境（IDE），里面的代码智能提示和自动补全功能不比IPython差的！Canopy中还集成了Pyhton包的
在线升级和管理系统，很是方便。由于是商业级别的，Canopy的性能和稳定性超强!也提供免费的free
版本和学术版本（用于教育科研也是免费的）。以前叫EPD，现在改名叫Canopy。Canopy是第一个将
Ipython升级到2.3.0的发行版；MatPlotLib已升级到1.4.2；NumPy 1.8.1；Scipy 1.2.0. 
但是它主要是追求性能和稳定性，所以不能指望所有的安装包都是最新的，例如对于MinGW,
Canopy是4.8.1，其它版本的发行版可都是4.7呀!basemap官方的业已换成1.0.8了,这对于那些还在被
迫使用Grads和NCL的用户而言是个福音!如果你有学校邮箱的话，可以在Enthought的网站注册一下，
选择学术+full的发行版本，会让你的工作如虎添翼的。 
</code></pre><h2 id="Sage"><a href="#Sage" class="headerlink" title="Sage"></a>Sage</h2><pre><code>[目前Sage 最新版本是7.3](http://www.sagemath.org/index.html)
万众瞩目的发行版，其目标是要干掉：MATLAB, MAPLE, MATCAD, Mathematica等。目前我也在学习中。
由于大名鼎鼎的MatPlotLib(stable 1.4.2),IPython(stable 2.3.0),Numpy(stable 1.9.1)
和Scipy（0.14.1）都已发布最新稳定版,要不了几个月,上面的发行版都会迎来较大的一次更新,
让我们拭目以待吧!
</code></pre><h2 id="Python（x，y）"><a href="#Python（x，y）" class="headerlink" title="Python（x，y）"></a>Python（x，y）</h2><pre><code>GUI基于PyQt，曾经是功能最全也是最强大的，而且是Windows系统中科学免费Python发行版的不二选择.
不过今时已不同往昔! PythonXY里面的许多包为了兼容性的问题，无法使用最新的程序包。尤其是令人
气愤的是MinGW到现在还是古董级的4.5版本，而TDM-GCC现在都4.8.1-3了。不过这个包在你安装了之后，
除了占用较大的磁盘空间之外，基本上你也不用再费什么神去找了，对于科学计算要有的基本都有了：
numpy，sicpy，matplotlib，spyder... 现在的版本是2.7.9。从安装到使用,时不时玩&quot;崩溃&quot;! 
版本的稳定性远不如2.7.3.1.我估计可能是作者把主要精力转移到开发和维护WinPython上面去的原因吧！
</code></pre><h2 id="WinPython"><a href="#WinPython" class="headerlink" title="WinPython"></a>WinPython</h2><pre><code>WinPython功能也是比较全的,软件包比较新，GUI基于PyQt，不过相对于Python（x，y），它主要是关注
便携式安装体验：你可以把它装在u盘里面。我现在windows中已不再使用PythonXY了,改成WinPython了,
对于MinGW,我直接安装了QT5.20(含MinGW4.8.0),再加上boost 1.54.0,用于科研,已非Visual 
Studio可以相提并论!现在的版本是2.7.10.稳定性已有相当的改善.
发布的版本也比较全:                               
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Anaconda&quot;&gt;&lt;a href=&quot;#Anaconda&quot; class=&quot;headerlink&quot; title=&quot;Anaconda&quot;&gt;&lt;/a&gt;Anaconda&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[Anaconda ](https://www.continuum.io/d
    
    </summary>
    
    
      <category term="python" scheme="http://smile921.github.io/tags/python/"/>
    
      <category term="science" scheme="http://smile921.github.io/tags/science/"/>
    
  </entry>
  
  <entry>
    <title>mysql  root密码重置</title>
    <link href="http://smile921.github.io/201608mysql-root%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/"/>
    <id>http://smile921.github.io/201608mysql-root密码重置/</id>
    <published>2016-08-30T00:36:57.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<p> 新装的mysql 或者用过一段时间的测试机mysql数据库忘了密码，又不想重装。想来应该有办法可以重置密码。<br> 首先想到mysqladmin 但是尝试在后无果，还是需要密码。经过一番查找尝试还是有高人，废话不多说了，光说不练假把式。看我如何操作</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/mysql stop</div><div class="line">mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</div><div class="line">mysql -u root mysql</div><div class="line">update user  set password=password(&apos;mysqlroot@&apos;) where user=&apos;root&apos;;</div><div class="line">FLUSH PRIVILEGES;</div><div class="line">/etc/init.d/mysql restart</div><div class="line">mysql -uroot -p</div><div class="line">输入先设置的密码 ok</div></pre></td></tr></table></figure>
<h2 id="python-操作mysql"><a href="#python-操作mysql" class="headerlink" title="python 操作mysql"></a>python 操作mysql</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line">#!/bin/python</div><div class="line">#coding=utf-8</div><div class="line">import MySQLdb</div><div class="line">import time</div><div class="line">from collections import OrderedDict</div><div class="line">from colorama import init, Fore</div><div class="line"></div><div class="line">class Mysql(object):</div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">        获取当前系统时间 </div><div class="line">        2016-08-30 11:13:18</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    def get_current_time(self):</div><div class="line">        created_time = time.strftime(</div><div class="line">            &apos;[%Y-%m-%d %H:%M:%S]&apos;,</div><div class="line">            time.localtime(</div><div class="line">                time.time()))</div><div class="line">        created_time = created_time.split(&apos;[&apos;)[1]</div><div class="line">        created_time = created_time.split(&apos;]&apos;)[0]</div><div class="line">        return created_time</div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">        host</div><div class="line">        user</div><div class="line">        password</div><div class="line">        db</div><div class="line">        port</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    def __init__(self, host, user, passwd, db, port):</div><div class="line">        try:</div><div class="line">            self.db = MySQLdb.connect(</div><div class="line">                host=host,</div><div class="line">                user=user,</div><div class="line">                passwd=passwd,</div><div class="line">                db=db,</div><div class="line">                port=port,</div><div class="line">                charset=&apos;utf8&apos;)</div><div class="line">            self.cur = self.db.cursor()</div><div class="line">        except MySQLdb.Error as e:</div><div class="line">            print Fore.RED + &apos;连接数据库失败&apos;</div><div class="line">            print Fore.RED + self.get_current_time(), &apos;[%Y-%m-%d %H:%M:%S]&apos;, time.localtime(time.time())</div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">        table 表名称</div><div class="line">        my_dict 要插入的数据，一个有序字典</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    def insert_data(self, table, my_dict):</div><div class="line">        try:</div><div class="line">            cols = &apos;,&apos;.join(my_dict.keys())</div><div class="line">            values = &apos;&quot;,&quot;&apos;.join(my_dict.values())</div><div class="line">            values = &apos;&quot;&apos; + values + &apos;&quot;&apos;</div><div class="line">            try:</div><div class="line">              #  print &quot;table:%s,cols:%s,values:%s.&quot; %(table, cols, values)</div><div class="line">                sql = &quot;insert into %s (%s) values(%s)&quot; % (table, cols, values)</div><div class="line">              #  print &quot;sql:&quot;,sql</div><div class="line">                result = self.cur.execute(sql)</div><div class="line">                self.db.commit()</div><div class="line">                if result:</div><div class="line">                    return 1</div><div class="line">                else:</div><div class="line">                    return 0</div><div class="line">            except MySQLdb.Error as e:</div><div class="line">                self.db.rollback()</div><div class="line">                if &quot;key &apos;PRIMARY&apos;&quot; in e.args[1]:</div><div class="line">                    print Fore.RED + self.get_current_time(), &quot;数据已存在，未插入数据&quot;</div><div class="line">                else:</div><div class="line">                    print Fore.RED + self.get_current_time(), &quot;插入数据失败，原因 %d: %s&quot; % (e.args[0], e.args[1])</div><div class="line">        except MySQLdb.Error as e:</div><div class="line">            print Fore.RED + self.get_current_time(), &quot;数据库错误，原因%d: %s&quot; % (e.args[0], e.args[1])</div><div class="line"></div><div class="line">    def query_data(self,sql):</div><div class="line">        try:</div><div class="line">            try:</div><div class="line">                result = self.cur.execute(sql)</div><div class="line">                self.db.commit()</div><div class="line">                if result:</div><div class="line">                    return 1</div><div class="line">                else:</div><div class="line">                    return 0</div><div class="line">            except MySQLdb.Error as e:</div><div class="line">                self.db.rollback()</div><div class="line">                if &quot;key &apos;PRIMARY&apos;&quot; in e.args[1]:</div><div class="line">                    print Fore.RED + self.get_current_time(), &quot;数据已存在，未插入数据&quot;</div><div class="line">                else:</div><div class="line">                    print Fore.RED + self.get_current_time(), &quot;插入数据失败，原因 %d: %s&quot; % (e.args[0], e.args[1])</div><div class="line">            pass</div><div class="line">        except MySQLdb.Error as e:</div><div class="line">            print Fore.RED + self.get_current_time(), &quot;数据库错误，原因%d: %s&quot; % (e.args[0], e.args[1])</div><div class="line">            </div><div class="line">DATABASES = &#123;</div><div class="line">    &apos;default&apos;: &#123;</div><div class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class="line">        &apos;NAME&apos;: &apos;xxx&apos;,</div><div class="line">        &apos;HOST&apos;: &apos;10.x.x5&apos;,</div><div class="line">        &apos;USER&apos;: &apos;wxspider&apos;,</div><div class="line">        &apos;PASSWORD&apos;: &apos;wxxxl235&apos;,</div><div class="line">        &apos;PORT&apos;: 3306</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">           </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    host = DATABASES[&apos;default&apos;][&apos;HOST&apos;]</div><div class="line">    user = DATABASES[&apos;default&apos;][&apos;USER&apos;]</div><div class="line">    passwd = DATABASES[&apos;default&apos;][&apos;PASSWORD&apos;]</div><div class="line">    db = DATABASES[&apos;default&apos;][&apos;NAME&apos;]</div><div class="line">    port = DATABASES[&apos;default&apos;][&apos;PORT&apos;]</div><div class="line">    mysql = Mysql(host, user, passwd, db, port)</div><div class="line">    created_time = mysql.get_current_time()</div><div class="line">    print created_time</div><div class="line">    dicts = OrderedDict()</div><div class="line">    dicts[&apos;id&apos;]=&apos;2&apos;</div><div class="line">    dicts[&apos;name&apos;]=&apos;python&apos;</div><div class="line">    tname=&apos;test&apos;</div><div class="line">    # 测试插入数据</div><div class="line">    result = mysql.insert_data(tname, dicts)</div><div class="line">    if result:</div><div class="line">        print Fore.GREEN + &quot;article_table：数据保存成功！&quot;</div><div class="line">    else:</div><div class="line">        print Fore.RED + &quot;article_table：数据保存失败！&quot;</div><div class="line"></div><div class="line">    sql = &apos;select * from test&apos;</div><div class="line">    #     测试查询数据</div><div class="line">    result = mysql.query_data(sql)</div><div class="line">    if result:</div><div class="line">        print Fore.GREEN + &quot;：成功！&quot;</div><div class="line">        tp = mysql.cur.fetchall()</div><div class="line">        print type(tp)</div><div class="line">        print tp</div><div class="line">    else:</div><div class="line">        print Fore.RED + &quot;：失败！&quot;</div><div class="line">    print result</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 新装的mysql 或者用过一段时间的测试机mysql数据库忘了密码，又不想重装。想来应该有办法可以重置密码。&lt;br&gt; 首先想到mysqladmin 但是尝试在后无果，还是需要密码。经过一番查找尝试还是有高人，废话不多说了，光说不练假把式。看我如何操作&lt;/p&gt;
 &lt;figu
    
    </summary>
    
    
      <category term="mysql" scheme="http://smile921.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>electron Build cross platform desktop apps with JavaScript, HTML, and CSS</title>
    <link href="http://smile921.github.io/201608electron-Build-cross-platform-desktop-apps-with-JavaScript-HTML-and-CSS/"/>
    <id>http://smile921.github.io/201608electron-Build-cross-platform-desktop-apps-with-JavaScript-HTML-and-CSS/</id>
    <published>2016-08-23T03:18:31.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>Electron 可以让你使用纯 JavaScript 调用丰富的原生 APIs 来创造桌面应用。你可以把它看作一个专注于桌面应用的 Node.js 的变体，而不是 Web 服务器。</p>
<p>这不意味着 Electron 是绑定了 GUI 库的 JavaScript。相反，Electron 使用 web 页面作为它的 GUI，所以你能把它看作成一个被 JavaScript 控制的，精简版的 Chromium 浏览器。</p>
<h2 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h2><p>在 Electron 里，运行 <code>package.json</code> 里 <code>main</code> 脚本的进程被称为<strong>主进程</strong>。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。</p>
<h2 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h2><p>由于 Electron 使用 Chromium 来展示页面，所以 Chromium 的多进程结构也被充分利用。每个 Electron 的页面都在运行着自己的进程，这样的进程我们称之为<strong>渲染进程</strong>。</p>
<p>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，Electron 用户拥有在网页中调用 Node.js 的 APIs 的能力，可以与底层操作系统直接交互。</p>
<h2 id="主进程与渲染进程的区别"><a href="#主进程与渲染进程的区别" class="headerlink" title="主进程与渲染进程的区别"></a>主进程与渲染进程的区别</h2><p>主进程使用 <code>BrowserWindow</code> 实例创建页面。每个 <code>BrowserWindow</code> 实例都在自己的渲染进程里运行页面。当一个 <code>BrowserWindow</code> 实例被销毁后，相应的渲染进程也会被终止。</p>
<p>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的页面。</p>
<p>由于在页面里管理原生 GUI 资源是非常危险而且容易造成资源泄露，所以在页面调用 GUI 相关的 APIs 是不被允许的。如果你想在网页里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p>
<p>在 Electron，我们提供几种方法用于主进程和渲染进程之间的通讯。像 <a href="https://github.com/electron/electron/blob/v1.1.3/docs/api/ipc-renderer.md" target="_blank" rel="external">ipcRenderer</a> 和 <a href="https://github.com/electron/electron/blob/v1.1.3/docs/api/ipc-main.md" target="_blank" rel="external">ipcMain</a> 模块用于发送消息， <a href="https://github.com/electron/electron/blob/v1.1.3/docs/api/remote.md" target="_blank" rel="external">remote</a> 模块用于 RPC 方式通讯。这些内容都可以在一个 FAQ 中查看 <a href="https://github.com/electron/electron/blob/v1.1.3/docs/faq/electron-faq.md#how-to-share-data-between-web-pages" target="_blank" rel="external">how to share data between web pages</a>。</p>
<h1 id="打造你第一个-Electron-应用"><a href="#打造你第一个-Electron-应用" class="headerlink" title="打造你第一个 Electron 应用"></a>打造你第一个 Electron 应用</h1><p>大体上，一个 Electron 应用的目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">your-app/</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure></p>
<p><code>package.json</code>的格式和 Node 的完全一致，并且那个被 <code>main</code> 字段声明的脚本文件是你的应用的启动脚本，它运行在主进程上。你应用里的 <code>package.json</code> 看起来应该像：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>    : <span class="string">"your-app"</span>,</div><div class="line">  <span class="attr">"version"</span> : <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"main"</span>    : <span class="string">"main.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：如果 <code>main</code> 字段没有在 <code>package.json</code> 声明，Electron会优先加载 <code>index.js</code>。</p>
<p><code>main.js</code> 应该用于创建窗口和处理系统事件，一个典型的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"><span class="comment">// 控制应用生命周期的模块。</span></div><div class="line"><span class="keyword">const</span> &#123;app&#125; = electron;</div><div class="line"><span class="comment">// 创建原生浏览器窗口的模块。</span></div><div class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = electron;</div><div class="line"></div><div class="line"><span class="comment">// 保持一个对于 window 对象的全局引用，如果你不这样做，</span></div><div class="line"><span class="comment">// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭</span></div><div class="line"><span class="keyword">let</span> mainWindow;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 创建浏览器窗口。</span></div><div class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;width: <span class="number">800</span>, height: <span class="number">600</span>&#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 加载应用的 index.html。</span></div><div class="line">  mainWindow.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/index.html`</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 启用开发工具。</span></div><div class="line">  mainWindow.webContents.openDevTools();</div><div class="line"></div><div class="line">  <span class="comment">// 当 window 被关闭，这个事件会被触发。</span></div><div class="line">  mainWindow.on(<span class="string">'closed'</span>, () =&gt; &#123;</div><div class="line">    <span class="comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span></div><div class="line">    <span class="comment">// 通常会把多个 window 对象存放在一个数组里面，</span></div><div class="line">    <span class="comment">// 与此同时，你应该删除相应的元素。</span></div><div class="line">    mainWindow = <span class="literal">null</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Electron 会在初始化后并准备</span></div><div class="line"><span class="comment">// 创建浏览器窗口时，调用这个函数。</span></div><div class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></div><div class="line">app.on(<span class="string">'ready'</span>, createWindow);</div><div class="line"></div><div class="line"><span class="comment">// 当全部窗口关闭时退出。</span></div><div class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></div><div class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></div><div class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</div><div class="line">    app.quit();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// 在 macOS 上，当点击 dock 图标并且该应用没有打开的窗口时，</span></div><div class="line">  <span class="comment">// 绝大部分应用会重新创建一个窗口。</span></div><div class="line">  <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) &#123;</div><div class="line">    createWindow();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></div><div class="line"><span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></div></pre></td></tr></table></figure></p>
<p>最后，你想展示的 <code>index.html</code> ：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    We are using node <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.node)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    Chrome <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.chrome)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    and Electron <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.electron)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>.</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="运行你的应用"><a href="#运行你的应用" class="headerlink" title="运行你的应用"></a>运行你的应用</h1><p>一旦你创建了最初的 <code>main.js</code>， <code>index.html</code> 和 <code>package.json</code> 这几个文件，你可能会想尝试在本地运行并测试，看看是不是和期望的那样正常运行。</p>
<h2 id="electron-prebuilt"><a href="#electron-prebuilt" class="headerlink" title="electron-prebuilt"></a>electron-prebuilt</h2><p><a href="https://github.com/electron-userland/electron-prebuilt" target="_blank" rel="external">electron-prebuilt</a> 是一个 <code>npm</code> 模块，包含所使用的 Electron 预编译版本。<br>如果你已经用 <code>npm</code> 全局安装了它，你只需要按照如下方式直接运行你的应用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron .</div></pre></td></tr></table></figure></p>
<p>如果你是局部安装，那运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./node_modules/.bin/electron .</div></pre></td></tr></table></figure></p>
<h2 id="手工下载-Electron-二进制文件"><a href="#手工下载-Electron-二进制文件" class="headerlink" title="手工下载 Electron 二进制文件"></a>手工下载 Electron 二进制文件</h2><p>如果你手工下载了 Electron 的二进制文件，你也可以直接使用其中的二进制文件直接运行你的应用。</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ .\electron\electron.exe your-app\</div></pre></td></tr></table></figure>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./electron/electron your-app/</div></pre></td></tr></table></figure>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./Electron.app/Contents/MacOS/Electron your-app/</div></pre></td></tr></table></figure>
<p><code>Electron.app</code> 里面是 Electron 发布包，你可以在 <a href="https://github.com/electron/electron/releases" target="_blank" rel="external">这里</a> 下载到。</p>
<h1 id="以发行版本运行"><a href="#以发行版本运行" class="headerlink" title="以发行版本运行"></a>以发行版本运行</h1><p>在你完成了你的应用后，你可以按照 <a href="https://github.com/electron/electron/blob/v1.1.3/docs/tutorial/application-distribution.md" target="_blank" rel="external">应用部署</a> 指导发布一个版本，并且以已经打包好的形式运行应用。</p>
<h1 id="参照下面例子"><a href="#参照下面例子" class="headerlink" title="参照下面例子"></a>参照下面例子</h1><p>复制并且运行这个库 <a href="https://github.com/electron/electron-quick-start" target="_blank" rel="external">electron/electron-quick-start</a>。</p>
<p><em>注意：</em>运行时需要你的系统已经安装了 <a href="https://git-scm.com/" target="_blank" rel="external">Git</a> 和 <a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js</a>（包含 <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 克隆这仓库</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</div><div class="line"><span class="comment"># 进入仓库</span></div><div class="line">$ <span class="built_in">cd</span> electron-quick-start</div><div class="line"><span class="comment"># 安装依赖库并运行应用</span></div><div class="line">$ npm install &amp;&amp; npm start</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;headerlink&quot; title=&quot;快速入门&quot;&gt;&lt;/a&gt;快速入门&lt;/h1&gt;&lt;p&gt;Electron 可以让你使用纯 JavaScript 调用丰富的原生 APIs 来创造桌面应用。你可以把它看作一个专注于桌
    
    </summary>
    
    
      <category term="electron" scheme="http://smile921.github.io/tags/electron/"/>
    
      <category term="javascript" scheme="http://smile921.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>KaTeX The fastest math typesetting library for the web</title>
    <link href="http://smile921.github.io/201608KaTeX-The-fastest-math-typesetting-library-for-the-web/"/>
    <id>http://smile921.github.io/201608KaTeX-The-fastest-math-typesetting-library-for-the-web/</id>
    <published>2016-08-23T01:22:59.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KaTeX-简介"><a href="#KaTeX-简介" class="headerlink" title="KaTeX 简介"></a>KaTeX 简介</h1><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><p><a href="../katex/index.html">demo</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"examples"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"example tex"</span> <span class="attr">data-expr</span>=<span class="string">"\displaystyle \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\cdots&#125; &#125; &#125; &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"example tex"</span> <span class="attr">data-expr</span>=<span class="string">"\displaystyle \left( \sum_&#123;k=1&#125;^n a_k b_k \right)^2 \leq \left( \sum_&#123;k=1&#125;^n a_k^2 \right) \left( \sum_&#123;k=1&#125;^n b_k^2 \right)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"example tex"</span> <span class="attr">data-expr</span>=<span class="string">"\displaystyle 1 +  \frac&#123;q^2&#125;&#123;(1-q)&#125;+\frac&#123;q^6&#125;&#123;(1-q)(1-q^2)&#125;+\cdots = \prod_&#123;j=0&#125;^&#123;\infty&#125;\frac&#123;1&#125;&#123;(1-q^&#123;5j+2&#125;)(1-q^&#123;5j+3&#125;)&#125;, \quad\quad \text&#123;for &#125;\lvert q\rvert&lt;1."</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Simple-API-no-dependencies-–-yet-super-fast-on-all-major-browsers"><a href="#Simple-API-no-dependencies-–-yet-super-fast-on-all-major-browsers" class="headerlink" title="Simple API, no dependencies – yet super-fast on all major browsers."></a>Simple API, no dependencies – yet super-fast on all major browsers.</h2><p><a href="https://khan.github.io/KaTeX/" target="_blank" rel="external">Fast math typesetting for the web.</a></p>
<ul>
<li><strong>Fast: </strong><br>   KaTeX renders its math synchronously and doesn’t need to reflow the page.</li>
<li><strong>Print quality:</strong><br>   KaTeX’s layout is based on Donald Knuth’s TeX, the gold standard for math typesetting.</li>
<li><strong>Self contained:</strong><br>   KaTeX has no dependencies and can easily be bundled with your website resources.</li>
<li><strong>Server side rendering:</strong><br>   KaTeX produces the same output regardless of browser or environment, so you can pre-render expressions using Node.js and send them as plain HTML.</li>
</ul>
<p>KaTeX supports all major browsers, including Chrome, Safari, Firefox, Opera, and IE 8 - IE 11.  A list of supported  commands can be on the <a href="https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX" target="_blank" rel="external">wiki</a>.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>You can <a href="https://github.com/khan/katex/releases" target="_blank" rel="external">download KaTeX</a> and host it on your server or include the <code>katex.min.js</code> and <code>katex.min.css</code> files on your page directly from a CDN:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="In-browser-rendering"><a href="#In-browser-rendering" class="headerlink" title="In-browser rendering"></a>In-browser rendering</h4><p>Call <code>katex.render</code> with a TeX expression and a DOM element to render into:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">katex.render(<span class="string">"c = \\pm\\sqrt&#123;a^2 + b^2&#125;"</span>, element);</div></pre></td></tr></table></figure>
<p>If KaTeX can’t parse the expression, it throws a <code>katex.ParseError</code> error.</p>
<h4 id="Server-side-rendering-or-rendering-to-a-string"><a href="#Server-side-rendering-or-rendering-to-a-string" class="headerlink" title="Server side rendering or rendering to a string"></a>Server side rendering or rendering to a string</h4><p>To generate HTML on the server or to generate an HTML string of the rendered math, you can use <code>katex.renderToString</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html = katex.renderToString(<span class="string">"c = \\pm\\sqrt&#123;a^2 + b^2&#125;"</span>);</div><div class="line"><span class="comment">// '&lt;span class="katex"&gt;...&lt;/span&gt;'</span></div></pre></td></tr></table></figure>
<p>Make sure to include the CSS and font files, but there is no need to include the JavaScript. Like <code>render</code>, <code>renderToString</code> throws if it can’t parse the expression.</p>
<h4 id="Rendering-options"><a href="#Rendering-options" class="headerlink" title="Rendering options"></a>Rendering options</h4><p>You can provide an object of options as the last argument to <code>katex.render</code> and <code>katex.renderToString</code>. Available options are:</p>
<ul>
<li><code>displayMode</code>: <code>boolean</code>. If <code>true</code> the math will be rendered in display mode, which will put the math in display style (so <code>\int</code> and <code>\sum</code> are large, for example), and will center the math on the page on its own line. If <code>false</code> the math will be rendered in inline mode. (default: <code>false</code>)</li>
<li><code>throwOnError</code>: <code>boolean</code>. If <code>true</code>, KaTeX will throw a <code>ParseError</code> when it encounters an unsupported command. If <code>false</code>, KaTeX will render the unsupported command as text in the color given by <code>errorColor</code>. (default: <code>true</code>)</li>
<li><code>errorColor</code>: <code>string</code>. A color string given in the format <code>&quot;#XXX&quot;</code> or <code>&quot;#XXXXXX&quot;</code>. This option determines the color which unsupported commands are rendered in. (default: <code>#cc0000</code>)</li>
</ul>
<p>For example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">katex.render(<span class="string">"c = \\pm\\sqrt&#123;a^2 + b^2&#125;"</span>, element, &#123; displayMode: <span class="literal">true</span> &#125;);</div></pre></td></tr></table></figure>
<h4 id="Automatic-rendering-of-math-on-a-page"><a href="#Automatic-rendering-of-math-on-a-page" class="headerlink" title="Automatic rendering of math on a page"></a>Automatic rendering of math on a page</h4><p>Math on the page can be automatically rendered using the auto-render extension. See <a href="contrib/auto-render/README.md">the Auto-render README</a> for more information.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;KaTeX-简介&quot;&gt;&lt;a href=&quot;#KaTeX-简介&quot; class=&quot;headerlink&quot; title=&quot;KaTeX 简介&quot;&gt;&lt;/a&gt;KaTeX 简介&lt;/h1&gt;&lt;h2 id=&quot;examples&quot;&gt;&lt;a href=&quot;#examples&quot; class=&quot;head
    
    </summary>
    
    
      <category term="nodejs" scheme="http://smile921.github.io/tags/nodejs/"/>
    
      <category term="KaTeX" scheme="http://smile921.github.io/tags/KaTeX/"/>
    
      <category term="web" scheme="http://smile921.github.io/tags/web/"/>
    
      <category term="TeX" scheme="http://smile921.github.io/tags/TeX/"/>
    
      <category term="Math" scheme="http://smile921.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>oracle 存储过程解题示例一</title>
    <link href="http://smile921.github.io/201608oracle-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E8%A7%A3%E9%A2%98%E7%A4%BA%E4%BE%8B%E4%B8%80/"/>
    <id>http://smile921.github.io/201608oracle-存储过程解题示例一/</id>
    <published>2016-08-22T08:09:16.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p> 某一个报表数据来自一个复杂业务的查询，其中某类资产的数据需要按百分比展示。同时这类资产的百分比总和加起来应该是100% 。问题比如这个分类是2,2,2 百分比是0.33,0.33,0.33 最终给出的结果是需要修正的即走后一条数据应该修正为0.34；同理的 如果是 1,2,3,1 的百分比计算也需要修正最后一条数据。当时的业务场景下只能用存储过程</p>
<h2 id="问题简化解析"><a href="#问题简化解析" class="headerlink" title="问题简化解析"></a>问题简化解析</h2><p> 首先加一些简单的测试数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">-- Create table</div><div class="line">create table OOTEST</div><div class="line">(</div><div class="line">  id     NVARCHAR2(16),</div><div class="line">  types  NVARCHAR2(16),</div><div class="line">  shares NUMBER</div><div class="line">)</div><div class="line">insert into ootest (ID, TYPES, SHARES)</div><div class="line">values (&apos;1&apos;, &apos;aa&apos;, 1);</div><div class="line"></div><div class="line">insert into ootest (ID, TYPES, SHARES)</div><div class="line">values (&apos;2&apos;, &apos;aa&apos;, 1);</div><div class="line"></div><div class="line">insert into ootest (ID, TYPES, SHARES)</div><div class="line">values (&apos;3&apos;, &apos;aa&apos;, 1);</div><div class="line"></div><div class="line">insert into ootest (ID, TYPES, SHARES)</div><div class="line">values (&apos;4&apos;, &apos;bb&apos;, 1);</div><div class="line"></div><div class="line">insert into ootest (ID, TYPES, SHARES)</div><div class="line">values (&apos;5&apos;, &apos;bb&apos;, 2);</div><div class="line"> select t.id,t.types,t.shares, rowid from ootest t ;</div></pre></td></tr></table></figure></p>
<p> eg：<br>| ID            | TYPES         | SHARES  |<br>| ————- |:————-:| ——-:|<br>| 1             | aa            |       1 |<br>| 2             | aa            |       1 |<br>| 3             | aa            |       1 |<br>| 4             | bb            |       1 |<br>| 5             | bb            |       2 |</p>
<h2 id="存储过程实现-Version-1-0"><a href="#存储过程实现-Version-1-0" class="headerlink" title="存储过程实现 (Version 1.0)"></a>存储过程实现 (Version 1.0)</h2><p>初步想法需要搞个临时表，先筛选数据进去，再遍历修改，之后再查询临时表返回数据即可。为了简单实现这里就不用临时表了，直接查询，然后循环处理数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">---</div><div class="line">--  </div><div class="line">-- 当过程中含有输出参数时，调用时必须通过BEGIN  END块，不能通过EXEC或CALL调用。如：</div><div class="line">DECLARE</div><div class="line">retcode NUMBER(7,2);</div><div class="line">retnote varchar(4000);</div><div class="line">BEGIN</div><div class="line">queryPercentOne(retcode,retnote,&apos;aa&apos;);</div><div class="line">DBMS_OUTPUT.PUT_LINE(retcode);</div><div class="line">DBMS_OUTPUT.PUT_LINE(retnote);</div><div class="line">END;</div><div class="line">---</div><div class="line">*/</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">create or replace procedure queryPercentOne(o_code out int, o_msg out varchar2,v_types in varchar2) is</div><div class="line">    v_count           number := 0; -- 总记录数</div><div class="line">    v_total           number := 0; </div><div class="line">    v_last            number := 0;</div><div class="line">    v_last_per        number :=0;</div><div class="line">    v_cid             NVARCHAR2(16);</div><div class="line">    v_ctypes          NVARCHAR2(16);</div><div class="line">    v_cshares         number;</div><div class="line">    v_rownum          number :=0;</div><div class="line">    v_cpercent        number(3,2) :=0.0;</div><div class="line">    v_percent         number(3,2) :=0.0;</div><div class="line">    v_crownum          number :=1;</div><div class="line">    CURSOR cur IS SELECT t.* FROM ootest t where t.types= v_types;</div><div class="line">begin</div><div class="line">   begin </div><div class="line">    select count(*) into v_count  from ootest t where t.types= v_types;  </div><div class="line">    select sum(t.shares) into v_total  from ootest t where t.types= v_types;</div><div class="line">   EXCEPTION    WHEN NO_DATA_FOUND THEN</div><div class="line">     v_count :=0;</div><div class="line">     v_total :=0;</div><div class="line">   end ;</div><div class="line">   open cur;</div><div class="line">   LOOP</div><div class="line">       fetch cur into  v_cid,v_ctypes,v_cshares ;</div><div class="line">       exit when cur%notfound;</div><div class="line">       v_cpercent := v_cshares/v_total;</div><div class="line">       if v_crownum = v_count then</div><div class="line">         v_cshares := v_total; </div><div class="line">         v_cpercent := (1 - v_percent);</div><div class="line">       else </div><div class="line">         v_percent := v_percent + (v_cshares/v_total);</div><div class="line">       end if ;     </div><div class="line">       dbms_output.put_line(v_crownum||&apos; . &apos;||v_cid||&apos; . &apos;||v_ctypes||&apos; . &apos;||v_cshares||&apos; .&apos;|| to_char(v_cpercent,&apos;0.99&apos;));</div><div class="line">       v_crownum := v_crownum+1;</div><div class="line">   end LOOP;   </div><div class="line">  o_code :=-1;</div><div class="line">  o_msg :=&apos;nothing&apos;;</div><div class="line">end queryPercentOne;</div></pre></td></tr></table></figure>
<h2 id="测试存储过程"><a href="#测试存储过程" class="headerlink" title="测试存储过程"></a>测试存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">begin</div><div class="line">  -- Call the procedure</div><div class="line">  querypercentone(o_code =&gt; :o_code,</div><div class="line">                  o_msg =&gt; :o_msg,</div><div class="line">                  v_types =&gt; :v_types);</div><div class="line">end;</div></pre></td></tr></table></figure>
<h3 id="测试-aa"><a href="#测试-aa" class="headerlink" title="测试 aa"></a>测试 aa</h3><blockquote>
<p>1 . 1 . aa . 1 . 0.33<br>2 . 2 . aa . 1 . 0.33<br>3 . 3 . aa . 3 . 0.34</p>
</blockquote>
<h3 id="测试-bb"><a href="#测试-bb" class="headerlink" title="测试 bb"></a>测试 bb</h3><blockquote>
<p>1 . 4 . bb . 1 . 0.33<br>2 . 5 . bb . 3 . 0.67</p>
</blockquote>
<h2 id="复杂SQL也可以做到-Version2-0"><a href="#复杂SQL也可以做到-Version2-0" class="headerlink" title="复杂SQL也可以做到 (Version2.0)"></a>复杂SQL也可以做到 (Version2.0)</h2><p>使用下列oracle自带函数</p>
<h3 id="ratio-to-report"><a href="#ratio-to-report" class="headerlink" title="ratio_to_report"></a>ratio_to_report</h3><blockquote>
<p>主要完成对百分比的计算，语法为<br>ratio_to_report(exp) over()<br>也就是根据over窗口函数的作用区间，求出作用区间中的单个值在整个区间的总值的比重<br>…</p>
</blockquote>
<h3 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h3><blockquote>
<p>decode(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)</p>
<p>该函数的含义如下：<br>IF 条件=值1 THEN<br>　　　　RETURN(翻译值1)<br>ELSIF 条件=值2 THEN<br>　　　　RETURN(翻译值2)<br>　　　　……<br>ELSIF 条件=值n THEN<br>　　　　RETURN(翻译值n)<br>ELSE<br>　　　　RETURN(缺省值)<br>END IF</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">select d.id,</div><div class="line">       d.shares,</div><div class="line">       d.ratio,</div><div class="line">       d.cnt,</div><div class="line">       d.total,</div><div class="line">       decode(d.cnt, 1, d.tail_rt + d.rate, d.rate) rate,</div><div class="line">       d.tail_rt</div><div class="line">  from (select c.id,</div><div class="line">               c.shares,</div><div class="line">               c.ratio, -- 份额 </div><div class="line">               c.total,</div><div class="line">               round(c.ratio, 4) rate, --占比</div><div class="line">               1 - sum(round(c.ratio, 4)) over() tail_rt, --尾差</div><div class="line">               row_number() over(partition by c.types order by c.id) cnt</div><div class="line">          from (select t.id,</div><div class="line">                       t.shares,</div><div class="line">                       t.types,</div><div class="line">                       b.total,</div><div class="line">                       ratio_to_report((t.shares)) OVER(partition by t.types) ratio</div><div class="line">                  from ootest t</div><div class="line">                  left join((select t.types, sum(t.shares) total</div><div class="line">                              from ootest t</div><div class="line">                             group by t.types) b)</div><div class="line">                    on t.types = b.types</div><div class="line">                 where t.types = &apos;bb&apos;) c) d;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题概述&quot;&gt;&lt;a href=&quot;#问题概述&quot; class=&quot;headerlink&quot; title=&quot;问题概述&quot;&gt;&lt;/a&gt;问题概述&lt;/h2&gt;&lt;p&gt; 某一个报表数据来自一个复杂业务的查询，其中某类资产的数据需要按百分比展示。同时这类资产的百分比总和加起来应该是100% 。
    
    </summary>
    
    
      <category term="oracle" scheme="http://smile921.github.io/tags/oracle/"/>
    
      <category term="存储过程" scheme="http://smile921.github.io/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
      <category term="题解" scheme="http://smile921.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发最佳实践</title>
    <link href="http://smile921.github.io/201608Android-%E5%BC%80%E5%8F%91%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://smile921.github.io/201608Android-开发最佳实践/</id>
    <published>2016-08-18T01:00:39.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="使用-Gradle-和他推荐的工程结构"><a href="#使用-Gradle-和他推荐的工程结构" class="headerlink" title="使用 Gradle 和他推荐的工程结构"></a>使用 Gradle 和他推荐的工程结构</h4><h4 id="把密码和敏感数据放在-gradle-properties-配置文件中"><a href="#把密码和敏感数据放在-gradle-properties-配置文件中" class="headerlink" title="把密码和敏感数据放在 gradle.properties 配置文件中"></a>把密码和敏感数据放在 gradle.properties 配置文件中</h4><h4 id="使用-Jackson-库解析-JSON-数据"><a href="#使用-Jackson-库解析-JSON-数据" class="headerlink" title="使用 Jackson 库解析 JSON 数据"></a>使用 Jackson 库解析 JSON 数据</h4><h4 id="不要自己实现-Http-client-使用-Volley-库或者-OkHttp-库"><a href="#不要自己实现-Http-client-使用-Volley-库或者-OkHttp-库" class="headerlink" title="不要自己实现 Http client 使用 Volley 库或者 OkHttp 库"></a>不要自己实现 Http client 使用 Volley 库或者 OkHttp 库</h4><h4 id="避免使用-Guava-库，由于-65k-方法限制使用其他少数库"><a href="#避免使用-Guava-库，由于-65k-方法限制使用其他少数库" class="headerlink" title="避免使用 Guava 库，由于 65k 方法限制使用其他少数库"></a>避免使用 Guava 库，由于 65k 方法限制使用其他少数库</h4><h4 id="在选择-Activities-和-Fragments-时特别小心"><a href="#在选择-Activities-和-Fragments-时特别小心" class="headerlink" title="在选择 Activities 和 Fragments 时特别小心"></a>在选择 Activities 和 Fragments 时特别小心</h4><h4 id="布局XML也是代码，请也好好组织编排"><a href="#布局XML也是代码，请也好好组织编排" class="headerlink" title="布局XML也是代码，请也好好组织编排"></a>布局XML也是代码，请也好好组织编排</h4><h4 id="使用样式避免布局的XML中有重复多余的属性"><a href="#使用样式避免布局的XML中有重复多余的属性" class="headerlink" title="使用样式避免布局的XML中有重复多余的属性"></a>使用样式避免布局的XML中有重复多余的属性</h4><h4 id="使用多个样式文件避免单个大文件样式"><a href="#使用多个样式文件避免单个大文件样式" class="headerlink" title="使用多个样式文件避免单个大文件样式"></a>使用多个样式文件避免单个大文件样式</h4><h4 id="保持你的颜色定义xml简短整洁，甚至定义一个调色板"><a href="#保持你的颜色定义xml简短整洁，甚至定义一个调色板" class="headerlink" title="保持你的颜色定义xml简短整洁，甚至定义一个调色板"></a>保持你的颜色定义xml简短整洁，甚至定义一个调色板</h4><h4 id="Do-not-make-a-deep-hierarchy-of-ViewGroups"><a href="#Do-not-make-a-deep-hierarchy-of-ViewGroups" class="headerlink" title="Do not make a deep hierarchy of ViewGroups"></a>Do not make a deep hierarchy of ViewGroups</h4><h4 id="避免客户端处理-WebViews-特别小心内存泄漏"><a href="#避免客户端处理-WebViews-特别小心内存泄漏" class="headerlink" title="避免客户端处理 WebViews 特别小心内存泄漏"></a>避免客户端处理 WebViews 特别小心内存泄漏</h4><h4 id="使用-Robolectric-做单元测试，Robotium-做UI-测试"><a href="#使用-Robolectric-做单元测试，Robotium-做UI-测试" class="headerlink" title="使用 Robolectric 做单元测试，Robotium 做UI 测试"></a>使用 Robolectric 做单元测试，Robotium 做UI 测试</h4><h4 id="使用-Genymotion-作为你的模拟器"><a href="#使用-Genymotion-作为你的模拟器" class="headerlink" title="使用 Genymotion 作为你的模拟器"></a>使用 Genymotion 作为你的模拟器</h4><h4 id="使用-ProGuard-或者-DexGuard"><a href="#使用-ProGuard-或者-DexGuard" class="headerlink" title="使用 ProGuard 或者 DexGuard"></a>使用 ProGuard 或者 DexGuard</h4><h4 id="使用-SharedPreferences-做简单的持久化，否则使用-ContentProviders"><a href="#使用-SharedPreferences-做简单的持久化，否则使用-ContentProviders" class="headerlink" title="使用 SharedPreferences 做简单的持久化，否则使用 ContentProviders"></a>使用 SharedPreferences 做简单的持久化，否则使用 ContentProviders</h4><h4 id="使用-Stetho-调试你的应用"><a href="#使用-Stetho-调试你的应用" class="headerlink" title="使用 Stetho 调试你的应用"></a>使用 Stetho 调试你的应用</h4><h2 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h2><p>把你的Android SDK 放到你的Home目录或者应用的独立目录，不要和IDE放在一起，避免某些原因IDE升级或者重装导致长时间的SDK重新下载安装。</p>
<h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><p>你的默认编译工具应该是 Gradle</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;h4 id=&quot;使用-Gradle-和他推荐的工程结构&quot;&gt;&lt;a href=&quot;#使用-Gradle-和他推荐的工程结构&quot; class=&quot;header
    
    </summary>
    
    
      <category term="android" scheme="http://smile921.github.io/tags/android/"/>
    
      <category term="java" scheme="http://smile921.github.io/tags/java/"/>
    
      <category term="tutor" scheme="http://smile921.github.io/tags/tutor/"/>
    
  </entry>
  
  <entry>
    <title>java jpda 远程调试</title>
    <link href="http://smile921.github.io/201608java-jpda-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>http://smile921.github.io/201608java-jpda-远程调试/</id>
    <published>2016-08-17T05:30:12.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Platform-Debugger-Architecture-JPDA-Java平台调试架构-由Java虚拟机后端和调试平台前端组成"><a href="#Java-Platform-Debugger-Architecture-JPDA-Java平台调试架构-由Java虚拟机后端和调试平台前端组成" class="headerlink" title="Java Platform Debugger Architecture(JPDA:Java平台调试架构) 由Java虚拟机后端和调试平台前端组成"></a>Java Platform Debugger Architecture(JPDA:Java平台调试架构) 由Java虚拟机后端和调试平台前端组成</h2><h2 id="对-执行java-或者java-jar-进行远程调试"><a href="#对-执行java-或者java-jar-进行远程调试" class="headerlink" title="对 执行java 或者java -jar 进行远程调试"></a>对 执行java 或者java -jar 进行远程调试</h2><h3 id="添加-agentlib-jdwp-transport-dt-socket-address-9000-server-y-suspend-n-即可"><a href="#添加-agentlib-jdwp-transport-dt-socket-address-9000-server-y-suspend-n-即可" class="headerlink" title="添加 -agentlib:jdwp=transport=dt_socket,address=9000,server=y,suspend=n  即可"></a>添加 -agentlib:jdwp=transport=dt_socket,address=9000,server=y,suspend=n  即可</h3><ul>
<li>注意一 transport=dt_socket 不可随意更改</li>
<li>注意二 address 是端口，不是ip地址或者host地址</li>
</ul>
<p>例子 java MainClass ,这里MainClass是要运行的class名字包括包名称</p>
<blockquote>
<p>“C:\Program Files\Java\jdk1.6.0_45\bin\java.exe” \<br>-agentlib:jdwp=transport=dt_socket,address=9000,server=y,suspend=n  \<br>-classpath .;”\E:\V1.0_ZJ\webmodel\otcp\cif\src\conf” \<br>“-Djava.ext.dirs=\E:\V1.0_ZJ\webmodel\otcp\cif\src\lib” MainClass<br>rem Listening for transport dt_socket at address: 9000<br>rem jpda program started</p>
</blockquote>
<h2 id="Tomcat-远程调试"><a href="#Tomcat-远程调试" class="headerlink" title="Tomcat  远程调试"></a>Tomcat  远程调试</h2><p>不改文件进行远程调试,可以通过命令”catalia.bat jpda start”，用调试状态启动tomcat，  </p>
<pre><code>
linux则是&quot;./catalia.sh jpda start&quot;。看catalia.bat 和 catalia.sh的区别,大致相同jpda参数是   

JPDA_TRANSPORT  (Optional) JPDA transport used when the &quot;jpda start&quot;   
                command is executed. The default is &quot;dt_socket&quot;.   

JPDA_ADDRESS    (Optional) Java runtime options used when the &quot;jpda start&quot;   
                command is executed. The default is 8000.   

JPDA_SUSPEND    (Optional) Java runtime options used when the &quot;jpda start&quot;   
                command is executed. Specifies whether JVM should suspend   
                execution immediately after startup. Default is &quot;n&quot;.
</code></pre><p>这里默认的jpda端口号为8000  </p>
<blockquote>
<p>E:\GIT\apache-tomcat-6.0.44\bin&gt;start “Tomcat” “D:\Program Files\Java\jdk1.8.0_51\bin\java.exe” \<br>-Djava.util.logging.config.file=”E:\GIT\apache-tomcat-6.0.44\conf\logging.properties” \<br>-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \<br>-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n  \<br>-Djava.endorsed.dirs=”E:\GIT\apache-tomcat-6.0.44\endorsed”    \<br>-classpath “E:\GIT\apache-tomcat-6.0.44\bin\bootstrap.jar”    \<br>-Dcatalina.base=”E:\GIT\apache-tomcat-6.0.44”<br>-Dcatalina.home=”E:\GIT\apache-tomcat-6.0.44”    \<br>-Djava.io.tmpdir=”E:\GIT\apache-tomcat-6.0.44\temp”  \<br>org.apache.catalina.startup.Bootstrap  start</p>
</blockquote>
<h2 id="Sun-官方文档说明"><a href="#Sun-官方文档说明" class="headerlink" title="Sun 官方文档说明"></a>Sun 官方文档说明</h2><h3 id="DESCRIPTION"><a href="#DESCRIPTION" class="headerlink" title="DESCRIPTION"></a>DESCRIPTION</h3><p>The Java Debugger, jdb, is a simple command-line debugger for Java classes. It is a demonstration of the Java Platform Debugger Architecture that provides inspection and debugging of a local or remote Java Virtual Machine.</p>
<h3 id="Starting-a-jdb-Session"><a href="#Starting-a-jdb-Session" class="headerlink" title="Starting a jdb Session"></a>Starting a jdb Session</h3><p>There are many ways to start a jdb session. The most frequently used way is to have jdb launch a new Java Virtual Machine (VM) with the main class of the application to be debugged. This is done by substituting the command jdb for java in the command line. For example, if your application’s main class is MyClass, you use the following command to debug it under JDB:</p>
<blockquote>
<p>C:> jdb MyClass </p>
</blockquote>
<p>When started this way, jdb invokes a second Java VM with any specified parameters, loads the specified class, and stops the VM before executing that class’s first instruction.</p>
<p>Another way to use jdb is by attaching it to a Java VM that is already running. A VM that is to be debugged with jdb must be started with the following options. These options load in-process debugging libraries and specify the kind of connection to be made.</p>
<blockquote>
<p>-agentlib:jdwp=transport=dt_shmem,server=y,suspend=n</p>
</blockquote>
<p>For example, the following command will run the MyClass application, and allow jdb to connect to it at a later time.</p>
<blockquote>
<p>C:> java -agentlib:jdwp=transport=dt_shmem,address=jdbconn,server=y,suspend=n MyClass</p>
</blockquote>
<p>You can then attach jdb to the VM with the following commmand:</p>
<blockquote>
<p>C:> jdb -attach jdbconn </p>
</blockquote>
<p>… </p>
<blockquote>
<p>Note that “MyClass” is not specified in the jdb command line in this case because jdb is connecting to an existing VM instead of launching a new one.</p>
</blockquote>
<p>There are many other ways to connect the debugger to a VM, and all of them are supported by jdb. The Java Platform Debugger Architecture has additional documentation on these connection options. For information on starting a J2SE 1.4.2 or early VM for use with jdb see 1.4.2 documentation</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-Platform-Debugger-Architecture-JPDA-Java平台调试架构-由Java虚拟机后端和调试平台前端组成&quot;&gt;&lt;a href=&quot;#Java-Platform-Debugger-Architecture-JPDA-Java平台调试
    
    </summary>
    
    
      <category term="java" scheme="http://smile921.github.io/tags/java/"/>
    
      <category term="jpda" scheme="http://smile921.github.io/tags/jpda/"/>
    
  </entry>
  
  <entry>
    <title>动手安装 Haskell koans 笔记</title>
    <link href="http://smile921.github.io/201608%E5%8A%A8%E6%89%8B%E5%AE%89%E8%A3%85-Haskell-koans-%E7%AC%94%E8%AE%B0/"/>
    <id>http://smile921.github.io/201608动手安装-Haskell-koans-笔记/</id>
    <published>2016-08-15T07:24:30.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cabal update</div><div class="line">cabal build Setup.hs -v</div></pre></td></tr></table></figure>
<h3 id="报错了"><a href="#报错了" class="headerlink" title="报错了"></a>报错了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Package has never been configured. Configuring with default flags. If this</div><div class="line">fails, please run configure manually.</div><div class="line">/usr/local/bin/ghc --numeric-version</div><div class="line">looking for tool ghc-pkg near compiler in /usr/local/bin</div><div class="line">found ghc-pkg in /usr/local/bin/ghc-pkg</div><div class="line">/usr/local/bin/ghc-pkg --version</div><div class="line">/usr/local/bin/ghc --supported-languages</div><div class="line">/usr/local/bin/ghc --info</div><div class="line">Reading available packages...</div><div class="line">Choosing modular solver.</div><div class="line">Resolving dependencies...</div><div class="line">Could not resolve dependencies:</div><div class="line">trying: HaskellKoans-0.1 (user goal)</div><div class="line">next goal: testloop (dependency of HaskellKoans-0.1)</div><div class="line">Dependency tree exhaustively searched.</div><div class="line">Configuring HaskellKoans-0.1...</div><div class="line">cabal: At least the following dependencies are missing:</div><div class="line">HUnit -any,</div><div class="line">attoparsec -any,</div><div class="line">hspec -any,</div><div class="line">mtl -any,</div><div class="line">testloop -any,</div><div class="line">text -any</div></pre></td></tr></table></figure>
<h3 id="缺少依赖，接着安装依赖"><a href="#缺少依赖，接着安装依赖" class="headerlink" title="缺少依赖，接着安装依赖"></a>缺少依赖，接着安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  cabal install HUnit</div><div class="line">Resolving dependencies...</div><div class="line">Configuring HUnit-1.3.1.1...</div><div class="line">Failed to install HUnit-1.3.1.1</div><div class="line">Build log ( /root/.cabal/logs/HUnit-1.3.1.1.log ):</div><div class="line">cabal: Error: some packages failed to install:</div><div class="line">HUnit-1.3.1.1 failed during the configure step. The exception was:</div><div class="line">user error (&apos;/usr/local/bin/ghc&apos; exited with an error:</div><div class="line">/usr/bin/ld: cannot find -lgmp</div><div class="line">collect2: ld returned 1 exit status</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="根据提示，缺少libgmp-so"><a href="#根据提示，缺少libgmp-so" class="headerlink" title="根据提示，缺少libgmp.so"></a>根据提示，缺少libgmp.so</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gcc -lgmp --verbose</div><div class="line">Using built-in specs.</div><div class="line">Target: x86_64-redhat-linux</div><div class="line">Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux</div><div class="line">Thread model: posix</div><div class="line">gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) </div><div class="line">COMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/4.4.7/:/usr/libexec/gcc/x86_64-redhat-linux/4.4.7/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/:/usr/lib/gcc/x86_64-redhat-linux/:/usr/libexec/gcc/x86_64-redhat-linux/4.4.7/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/:/usr/lib/gcc/x86_64-redhat-linux/</div><div class="line">LIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/4.4.7/:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../:/lib/:/usr/lib/</div><div class="line">COLLECT_GCC_OPTIONS=&apos;-v&apos; &apos;-mtune=generic&apos;</div><div class="line"> /usr/libexec/gcc/x86_64-redhat-linux/4.4.7/collect2 --eh-frame-hdr --build-id -m elf_x86_64 --hash-style=gnu -dynamic-linker /lib64/ld-linux-x86-64.so.2 /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/4.4.7/crtbegin.o -L/usr/lib/gcc/x86_64-redhat-linux/4.4.7 -L/usr/lib/gcc/x86_64-redhat-linux/4.4.7 -L/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../.. -lgmp -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-redhat-linux/4.4.7/crtend.o /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/crtn.o</div><div class="line">/usr/bin/ld: cannot find -lgmp</div><div class="line">collect2: ld returned 1 exit status</div></pre></td></tr></table></figure>
<h3 id="试着安装一下"><a href="#试着安装一下" class="headerlink" title="试着安装一下"></a>试着安装一下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">yum -y install gmp</div><div class="line">Failed to set locale, defaulting to C</div><div class="line">Loaded plugins: fastestmirror, security</div><div class="line">Setting up Install Process</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> ...</div><div class="line">base                                                                                                                  | 3.7 kB     00:00     </div><div class="line">extras                                                                                                                | 3.4 kB     00:00     </div><div class="line">nginx                                                                                                                 | 2.9 kB     00:00     </div><div class="line">updates                                                                                                               | 3.4 kB     00:00     </div><div class="line">Package gmp-4.3.1-10.el6.x86_64 already installed and latest version</div><div class="line">Nothing to do</div></pre></td></tr></table></figure>
<h3 id="貌似已经安装了"><a href="#貌似已经安装了" class="headerlink" title="貌似已经安装了"></a>貌似已经安装了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># find / -name libgmp.so*</div><div class="line">/opt/gitlab/embedded/lib/engines/libgmp.so</div><div class="line">/usr/lib64/libgmp.so.3.5.0</div><div class="line">/usr/lib64/libgmp.so.3</div><div class="line">/usr/lib64/openssl/engines/libgmp.so</div><div class="line">/usr/lib64/libgmp.so.10</div></pre></td></tr></table></figure>
<h3 id="建立一个符号链接试试"><a href="#建立一个符号链接试试" class="headerlink" title="建立一个符号链接试试"></a>建立一个符号链接试试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -sv /usr/lib64/libgmp.so.3.5.0 /usr/lib64/libgmp.so</div><div class="line">`/usr/lib64/libgmp.so&apos; -&gt; `/usr/lib64/libgmp.so.3.5.0&apos;</div></pre></td></tr></table></figure>
<h3 id="在看看结果"><a href="#在看看结果" class="headerlink" title="在看看结果"></a>在看看结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> ls -al /usr/lib64/libgmp*</div><div class="line">lrwxrwxrwx. 1 root root     26 Aug 15 07:18 /usr/lib64/libgmp.so -&gt; /usr/lib64/libgmp.so.3.5.0</div><div class="line">lrwxrwxrwx. 1 root root     11 Jul 26 05:07 /usr/lib64/libgmp.so.10 -&gt; libgmp.so.3</div><div class="line">lrwxrwxrwx. 1 root root     15 Jun 21 01:58 /usr/lib64/libgmp.so.3 -&gt; libgmp.so.3.5.0</div><div class="line">-rwxr-xr-x. 1 root root 376792 Nov 18  2015 /usr/lib64/libgmp.so.3.5.0</div><div class="line">lrwxrwxrwx. 1 root root     17 Jun 21 01:58 /usr/lib64/libgmpxx.so.4 -&gt; libgmpxx.so.4.1.0</div><div class="line">-rwxr-xr-x. 1 root root  17992 Nov 18  2015 /usr/lib64/libgmpxx.so.4.1.0</div></pre></td></tr></table></figure>
<h3 id="ldconfig"><a href="#ldconfig" class="headerlink" title="ldconfig"></a>ldconfig</h3><h3 id="接着安装-竟然可以"><a href="#接着安装-竟然可以" class="headerlink" title="接着安装,竟然可以"></a>接着安装,竟然可以</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cabal install HUnit</div><div class="line">Resolving dependencies...</div><div class="line">Configuring HUnit-1.3.1.1...</div><div class="line">Building HUnit-1.3.1.1...</div><div class="line">Installed HUnit-1.3.1.1</div></pre></td></tr></table></figure>
<h3 id="然后-testloop-编译不过去了"><a href="#然后-testloop-编译不过去了" class="headerlink" title="然后 testloop 编译不过去了"></a>然后 testloop 编译不过去了</h3><pre><code>cabal install testloop
Resolving dependencies...
Configuring testloop-0.1.1.0...
Building testloop-0.1.1.0...
Failed to install testloop-0.1.1.0
Build log ( /root/.cabal/logs/testloop-0.1.1.0.log ):
Configuring testloop-0.1.1.0...
Building testloop-0.1.1.0...
Preprocessing library testloop-0.1.1.0...
[1 of 6] Compiling System.TestLoop.Internal.Signal ( src/System/TestLoop/Internal/Signal.hs, dist/build/System/TestLoop/Internal/Signal.o )
[2 of 6] Compiling System.TestLoop.Util ( src/System/TestLoop/Util.hs, dist/build/System/TestLoop/Util.o )
[3 of 6] Compiling System.TestLoop.Internal.Types ( src/System/TestLoop/Internal/Types.hs, dist/build/System/TestLoop/Internal/Types.o )
[4 of 6] Compiling System.TestLoop.Internal.Watcher ( src/System/TestLoop/Internal/Watcher.hs, dist/build/System/TestLoop/Internal/Watcher.o )
[5 of 6] Compiling System.TestLoop.Internal.Cabal ( src/System/TestLoop/Internal/Cabal.hs, dist/build/System/TestLoop/Internal/Cabal.o )
[6 of 6] Compiling System.TestLoop  ( src/System/TestLoop.hs, dist/build/System/TestLoop.o )

src/System/TestLoop.hs:47:23:
    Couldn&apos;t match type `FS.FilePath&apos; with `[Char]&apos;
    Expected type: FilePath
      Actual type: FS.FilePath
    In the second argument of `treeExtExists&apos;, namely
      `(FS.decodeString path)&apos;
    In a stmt of a &apos;do&apos; block:
      treeExtExists
        manager
        (FS.decodeString path)
        &quot;hs&quot;
        (reloadTestSuite moduleName modulePath paths)

src/System/TestLoop.hs:49:23:
    Couldn&apos;t match type `[Char]&apos; with `FS.FilePath&apos;
    Expected type: FilePath -&gt; IO ()
      Actual type: FS.FilePath -&gt; IO ()
    In the fourth argument of `treeExtExists&apos;, namely
      `(reloadTestSuite moduleName modulePath paths)&apos;
    In a stmt of a &apos;do&apos; block:
      treeExtExists
        manager
        (FS.decodeString path)
        &quot;hs&quot;
        (reloadTestSuite moduleName modulePath paths)
cabal: Error: some packages failed to install:
testloop-0.1.1.0 failed during the building phase. The exception was:
ExitFailure 1
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载源代码&quot;&gt;&lt;a href=&quot;#下载源代码&quot; class=&quot;headerlink&quot; title=&quot;下载源代码&quot;&gt;&lt;/a&gt;下载源代码&lt;/h2&gt;&lt;h2 id=&quot;编译安装&quot;&gt;&lt;a href=&quot;#编译安装&quot; class=&quot;headerlink&quot; title=&quot;编译安装&quot;
    
    </summary>
    
    
      <category term="haskell" scheme="http://smile921.github.io/tags/haskell/"/>
    
      <category term="koan" scheme="http://smile921.github.io/tags/koan/"/>
    
  </entry>
  
  <entry>
    <title>awesome koans</title>
    <link href="http://smile921.github.io/201608awesome-koans/"/>
    <id>http://smile921.github.io/201608awesome-koans/</id>
    <published>2016-08-12T07:56:23.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="awesome-koans"><a href="#awesome-koans" class="headerlink" title="awesome-koans"></a>awesome-koans</h1><h3 id="What-is-Koan"><a href="#What-is-Koan" class="headerlink" title="What is Kōan"></a>What is <a href="https://en.wikipedia.org/wiki/K%C5%8Dan#Sources" target="_blank" rel="external">Kōan</a></h3><p>Koan（公案）是佛教禅宗的术语，乃是佛教禅宗祖师的一段言行或者一个小故事，用于引导和开悟。</p>
<p>编程语言的学习也有一种公案形式的学习方法，是我见过的最好的学习一门新的编程语言的方式。以<a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="external">TDD</a>的形式，预先编写好每一个知识点的测试代码，引导学习者使用相关的知识编写代码以通过测试。这种像闯关一样的形式让人充满的学习的动力，也解决了很多人学习过程中只有纸上谈兵而没有动手机会的问题。</p>
<p>这个Repo用于收集各种语言可用的koans方便学习。</p>
<h3 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h3><p><a href="https://github.com/bjpbakker/angular-koans" target="_blank" rel="external">https://github.com/bjpbakker/angular-koans</a></p>
<h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p><a href="https://github.com/marcinbunsch/bash_koans" target="_blank" rel="external">https://github.com/marcinbunsch/bash_koans</a></p>
<h3 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h3><p><a href="https://github.com/lazerwalker/clojurescript-koans" target="_blank" rel="external">https://github.com/lazerwalker/clojurescript-koans</a></p>
<h3 id="Cpp"><a href="#Cpp" class="headerlink" title="Cpp"></a>Cpp</h3><p><a href="https://github.com/torbjoernk/CppKoans" target="_blank" rel="external">https://github.com/torbjoernk/CppKoans</a></p>
<h3 id="ColdFusion"><a href="#ColdFusion" class="headerlink" title="ColdFusion"></a>ColdFusion</h3><p><a href="https://github.com/nodoherty/ColdFusion-Koans" target="_blank" rel="external">https://github.com/nodoherty/ColdFusion-Koans</a></p>
<h3 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h3><p><a href="https://github.com/sleepyfox/coffeescript-koans" target="_blank" rel="external">https://github.com/sleepyfox/coffeescript-koans</a></p>
<h3 id="CSharp"><a href="#CSharp" class="headerlink" title="CSharp"></a>CSharp</h3><p><a href="https://github.com/jtigger/csharp-koans" target="_blank" rel="external">https://github.com/jtigger/csharp-koans</a></p>
<h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h3><p><a href="https://github.com/butlermatt/dart_koans" target="_blank" rel="external">https://github.com/butlermatt/dart_koans</a></p>
<h3 id="DotNet"><a href="#DotNet" class="headerlink" title="DotNet"></a>DotNet</h3><p><a href="https://github.com/CoryFoy/DotNetKoans" target="_blank" rel="external">https://github.com/CoryFoy/DotNetKoans</a></p>
<h3 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h3><p><a href="https://github.com/elixirkoans/elixir-koans" target="_blank" rel="external">https://github.com/elixirkoans/elixir-koans</a></p>
<h3 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h3><p><a href="https://github.com/patrickgombert/erlang-koans" target="_blank" rel="external">https://github.com/patrickgombert/erlang-koans</a></p>
<h3 id="FSharp"><a href="#FSharp" class="headerlink" title="FSharp"></a>FSharp</h3><p><a href="https://github.com/ChrisMarinos/FSharpKoans" target="_blank" rel="external">https://github.com/ChrisMarinos/FSharpKoans</a></p>
<h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><p><a href="https://github.com/cdarwin/go-koans" target="_blank" rel="external">https://github.com/cdarwin/go-koans</a></p>
<h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><p><a href="https://github.com/nadavc/groovykoans" target="_blank" rel="external">https://github.com/nadavc/groovykoans</a></p>
<h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><p><a href="https://github.com/HaskVan/HaskellKoans" target="_blank" rel="external">https://github.com/HaskVan/HaskellKoans</a></p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><a href="https://github.com/matyb/java-koans" target="_blank" rel="external">https://github.com/matyb/java-koans</a></p>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><p><a href="https://github.com/mrdavidlaing/javascript-koans" target="_blank" rel="external">https://github.com/mrdavidlaing/javascript-koans</a></p>
<h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h3><p><a href="https://github.com/Kotlin/kotlin-koans" target="_blank" rel="external">https://github.com/Kotlin/kotlin-koans</a></p>
<h3 id="Lisp"><a href="#Lisp" class="headerlink" title="Lisp"></a>Lisp</h3><p><a href="https://github.com/google/lisp-koans" target="_blank" rel="external">https://github.com/google/lisp-koans</a></p>
<h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><p><a href="https://github.com/kikito/lua_missions" target="_blank" rel="external">https://github.com/kikito/lua_missions</a></p>
<h3 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h3><p><a href="https://github.com/joecannatti/Objective-C-Koans" target="_blank" rel="external">https://github.com/joecannatti/Objective-C-Koans</a></p>
<h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><p><a href="https://github.com/forcedotcom/PerlKoans" target="_blank" rel="external">https://github.com/forcedotcom/PerlKoans</a></p>
<h3 id="Prolog"><a href="#Prolog" class="headerlink" title="Prolog"></a>Prolog</h3><p><a href="https://github.com/araneforseti/prolog-koans" target="_blank" rel="external">https://github.com/araneforseti/prolog-koans</a></p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><a href="https://github.com/gregmalcolm/python_koans" target="_blank" rel="external">https://github.com/gregmalcolm/python_koans</a></p>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><p><a href="https://github.com/DASpringate/Rkoans" target="_blank" rel="external">https://github.com/DASpringate/Rkoans</a></p>
<h3 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a>ReactJS</h3><p><a href="https://github.com/arkency/reactjs_koans" target="_blank" rel="external">https://github.com/arkency/reactjs_koans</a></p>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p><a href="http://rubykoans.com/" target="_blank" rel="external">http://rubykoans.com/</a></p>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><p><a href="https://github.com/rubbish/scala-koans" target="_blank" rel="external">https://github.com/rubbish/scala-koans</a></p>
<h3 id="Smalltalk"><a href="#Smalltalk" class="headerlink" title="Smalltalk"></a>Smalltalk</h3><p><a href="https://github.com/sl4m/gnu_smalltalk_koans" target="_blank" rel="external">https://github.com/sl4m/gnu_smalltalk_koans</a></p>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><p><a href="https://github.com/mokagio/Swift-Koans" target="_blank" rel="external">https://github.com/mokagio/Swift-Koans</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;awesome-koans&quot;&gt;&lt;a href=&quot;#awesome-koans&quot; class=&quot;headerlink&quot; title=&quot;awesome-koans&quot;&gt;&lt;/a&gt;awesome-koans&lt;/h1&gt;&lt;h3 id=&quot;What-is-Koan&quot;&gt;&lt;a href
    
    </summary>
    
    
      <category term="awesome" scheme="http://smile921.github.io/tags/awesome/"/>
    
      <category term="koans" scheme="http://smile921.github.io/tags/koans/"/>
    
  </entry>
  
  <entry>
    <title>BT种子嗅探器原理</title>
    <link href="http://smile921.github.io/201608BT%E7%A7%8D%E5%AD%90%E5%97%85%E6%8E%A2%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <id>http://smile921.github.io/201608BT种子嗅探器原理/</id>
    <published>2016-08-12T05:00:30.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前看到 lantern 这个十分火的翻墙工具，其利用了P2P的思想，就想了解一下P2P相关的协议。看了下最流行的BT协议官方文档，就产生了实现BT协议的想法，顺便根据协议实现了一个BT种子嗅探器。</p>
<p>也有人将BT种子嗅探器称为BT种子爬虫，个人觉得其行为特性和传统的web爬虫相差较大，反而和嗅探器很类似，因此暂且称之为BT种子嗅探器吧。</p>
<p>接下来将写一系列文章来介绍其原理和具体实现方式。这篇文章先提纲挈领，介绍其工作原理，以对全局有一个把握。后序的文章再介绍具体细节。</p>
<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>在讲原理之前首先你得具备BitTorrent(简称BT)协议的一些基本知识，以便于理解接下来要讲的嗅探器。BT协议其实是一个协议簇，BEP-3 是其基本协议内容，其他的大部分都是围绕这个来进行扩展或补充。要想从BT网络中下载一个资源，必须具备以下部分：</p>
<p>种子文件（也就是我们常说的种子，后缀是 .torrent，本质上是一个由bencode编码的文本文件，其把资源分成很多虚拟块，并记录每个块的hash值，另外上面还记录着其他信息，比如文件大小、名字、Tracker服务器等）<br>BT客户端（需要有专门解析BT协议的程序，这样才能下载，比如迅雷，电驴）<br>Tracker服务器 （记录着peer和种子相关信息，起着中心调控的作用）<br>下载资源的时候，客户端首先根据bencode（bencode是BT协议中的编码方式）解码种子文件，得到Tracker服务器的地址和资源信息，通过和Tracker服务器沟通得到其他已经下载该资源的peers信息（其他已经拥有该资源的客户端或者发布该资源的人），然后再和这些peers沟通得到自己想要的部分，即互通有无。由于把文件分成很多块来同时从不同的地方下载，这也就是为什么BT通常下载快的原因。</p>
<h2 id="DHT协议"><a href="#DHT协议" class="headerlink" title="DHT协议"></a>DHT协议</h2><p>通过上面我们知道，Tracker服务器在资源下载的过程中起着至关重要的作用，只有通过它我们才能得到其他peers的信息，才能够下载，但这同时也成了BT协议的一个弱点，如果Tracker服务器挂掉了或者被封被屏蔽，整个网络也就瘫痪了。由于一些资源都是有版权的，还有一些资源是限制级的，比如色情资源，Tracker服务器很容易被迫关闭或被墙。后来聪明的人类发明了另外一种协议，就是 Distributed hash table, 简称DHT，这个协议就是用来弥补这个弱点的。</p>
<p>BT协议簇中的DHT协议 是基于 Kademlia协议 建立的，其基本思想很好理解。DHT 由很多节点组成，每个节点保存一张表，表里边记录着自己的好友节点。当你向一个节点A查询另外一个节点B的信息的时候，A就会查询自己的好友表，如果里边包含B，那么A就返回B的信息，否则A就返回距离B距离最近的k个节点。然后你再向这k个节点再次查询B的信息，这样循环一直到查询到B的信息，查询到B的信息后你应该向之前所有查询过的节点发个通知，告诉他们，你有B的信息。</p>
<p>举个例子，比如我现在想要Angelababy的微信号（额…我要干嘛），我就从自己的微信好友中挑出k个最可能认识她的人，然后依次问他们有没有Angelababy的微信号，假如其中一个认识，那么他就会给我Angelababy的微信号，我也就不继续问其他人了。假如他不认识，他就给我推荐k个他微信好友中最有可能认识Angelababy的k个人，然后我再继续这k个人，就这样循环一直到我问到为止。OK，现在我已经得到了Angelababy的微信号，我就会告诉之前所有我问过的人，我有Angelababy的微信号。</p>
<p>当客户端下载资源的时候，他会利用上述方式查找peers信息，这样每个人都充当了Tracker的作用，也就解决了上面那个问题。</p>
<h2 id="嗅探器原理"><a href="#嗅探器原理" class="headerlink" title="嗅探器原理"></a>嗅探器原理</h2><p>终于到核心部分了。</p>
<p>BT种子嗅探器就是利用了DHT协议得到peer信息后会向他之前查询过的节点发送通知这一点，这就是嗅探器的核心。</p>
<p>剩下的工作就是我们要让更多的节点发给我们通知。那么如何让更多的节点发给我们通知呢？</p>
<p>我们要不断的查询自己的好友节点表，并对返回回来的节点进行查询，这样才会有更多的人认识我们<br>别人向我们查询Target的时候，我们要伪装成Target的好友，返回结果里边包括自己，这样会有更多被查询、收到通知的机会<br>这就是BT种子嗅探器的原理，简单吧 :)</p>
<h2 id="种子下载器"><a href="#种子下载器" class="headerlink" title="种子下载器"></a>种子下载器</h2><p>在BT网络中，通过上述原理收到信息并不是种子，而是发送消息者的ip和port、种子infohash（可以理解为种子的id）。我们如果想要得到种子的话，还需要做一番工作。这里涉及到另外一个非常重要的协议 BEP-09，BEP-09规定了如何通过种子infohash得到种子。</p>
<p>这里不铺开讲，仅说下大致过程。首先同我们收到的消息里边的 ip:port 建立TCP连接，然后发送握手消息，并告知对方自己支持BEP-09协议，然后向对方请求种子的信息，收到对方返回的种子信息后，依次或同时请求每一个块。最有所有块收集完后，对其进行拼接并通过sha1算法计算其infohash，如果和我们请求的infohash值相同则保存起来，否则丢掉。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>这样你可以得到非常多的种子信息，你可以对其进行索引建立自己的BT种子搜索引擎，建立自己的海盗湾。但你需要注意版权问题和色情资源问题。</p>
<h1 id="BT种子嗅探器–DHT篇"><a href="#BT种子嗅探器–DHT篇" class="headerlink" title="BT种子嗅探器–DHT篇"></a>BT种子嗅探器–DHT篇</h1><h2 id="背景知识-1"><a href="#背景知识-1" class="headerlink" title="背景知识"></a>背景知识</h2><p>DHT全称 Distributed Hash Table，中文翻译过来就是分布式哈希表。它是一种去中心化的分布式系统，特点主要有自动去中心化，强大的容错能力，支持扩展。另外它规定了自己的架构，包括keyspace和overlay network（覆盖网络）两部分。但是他没有规定具体的算法细节，所以出现了很多不同的实现方式，比如Chord，Pastry，Kademlia等。BitTorrent中的DHT是基于Kademlia的一种变形，它的官方名称叫做 Mainline DHT。</p>
<p>DHT人如其名，把它看成一个整体，从远处看它，它就是一张哈希表，只不过这张表是分布式的，存在于很多机器上。它同时支持set(key, val)，get(key)操作。DHT可以用于很多方面，比如分布式文件系统，DNS，即时消息(IM)，以及我们最熟悉的点对点文件共享（比如BT协议）等。</p>
<p>下面我们提到的DHT默认都是Mainline DHT，例子都是用伪代码来表示。读下面段落的时候要时刻记着，DHT是一个哈希表。</p>
<blockquote>
<p>Mainline DHT<br>Mainline DHT遵循DHT的架构，下面我们分别从Keyspace和Overlay network两方面具体说明。</p>
<p>Keyspace<br>keyspace主要是关于key的一些规定。</p>
</blockquote>
<p>Mainline dht里边的key长度为160bit，注意是bit，不是byte。在常见的编译型编程语言中，最长的整型也才是64bit，所以用整型是表示不了key的，我们得想其他的方式。我们可以用数组方式表示它，数组类型你可以选用长度不同的整型，比如int8，int16，int32等。这里为了下边方便计算，我们采用长度为20的byte数组来表示。</p>
<p>在mainline dht中，key之间唯一的一种计算是xor，即异或（还记得异或的知识吧？）。我们的key是用长度为20的byte数组来表示，因此我们应该从前往后依次计算两个key的相对应的byte的异或值，最终结果得到的是另外一个长度为20的byte数组。算法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">​for i = 0; i &lt; 20; i++ &#123;</div><div class="line">​    result[i] = key1[i] ^ key2[i];</div><div class="line">​&#125;</div></pre></td></tr></table></figure>
<p>读到这里，你是不是要问xor有啥用？还记得原理篇中DHT的工作方式吗？</p>
<p>xor是为了找到好友表中离key最近的k个节点，什么样的节点最近？就是好友中每个节点和key相异或，得到的结果越小就越近。这里又衍生另外一个问题，byte数组之间怎么比较大小？很简单，从前往后，依次比较每一个byte的大小即可。</p>
<p>在Mainline DHT中，我们用160bit的key来代表每个节点和每个资源的ID，我们查找节点或者查找资源的时候实际上就是查找他们的ID。回想一下，这是不是很哈希表? :)</p>
<p>另外聪明的你可能又该问了，我们怎么样知道每个节点或者每个资源的ID是多少？在Mainline DHT中，节点的ID一般是随机生成的，而资源的ID是用sha1算法加密资源的内容后得到的。</p>
<p>OK，关于key就这么多，代码实现你可以查考这里。</p>
<h2 id="Overlay-network"><a href="#Overlay-network" class="headerlink" title="Overlay network"></a>Overlay network</h2><p>Overlay network主要是关于DHT内部节点是怎么存储数据的，不同节点之间又是怎样通信的。</p>
<p>首先我们回顾一下原理篇中DHT的工作方式:</p>
<blockquote>
<p>DHT 由很多节点组成，每个节点保存一张表，表里边记录着自己的好友节点。当你向一个节点A查询另外一个节点B的信息的时候，A就会查询自己的好友表，如果里边包含B，那么A就返回B的信息，否则A就返回距离B距离最近的k个节点。然后你再向这k个节点再次查询B的信息，这样循环一直到查询到B的信息，查询到B的信息后你应该向之前所有查询过的节点发个通知，告诉他们，你有B的信息。<br>整个DHT是一个哈希表，它把自己的数据化整为零分散在不同的节点里。OK，现在我们看下，一个节点内部是用什么样的数据结构存储数据的。</p>
</blockquote>
<p>节点内部数据存储 - Routing Table<br>用什么样的数据结构得看支持什么样的操作，还得看各种操作的频繁程度。从上面工作方式我们知道，操作主要有两个：</p>
<p>在我（注意：“我”是一个节点）的好友节点中查询离一个key最近的k个节点（在Mainline DHT中，k=8），程度为频繁<br>把一个节点保存起来，也就是插入操作，程度为频繁<br>首先看到“最近”、“k”，我们会联想到top k问题。一个很straightforward的做法是，用一个数组保存节点。这样的话，我们看下算法复杂度。top k问题用堆解决，查询复杂度为O(k + (n-k)*log(k))，当k=8时，接近于O(n)；插入操作为O(1)。注：n为一个节点的好友节点总数。</p>
<p>当n很大的时候，操作时间可能会很长。那么有没有O(log(n))的算法呢？</p>
<p>联想到上面堆的算法，你可能说，我们可以维护一个堆啊，插入和查询的时候都是O(log(n))。这种做法堆是根据堆中元素与某一个固定不变的key的距离来维护的，但是通常情况下，我们查询的key都是变化的，因此这种做法不可行。</p>
<h2 id="那还有其他O-log-n-的算法吗？"><a href="#那还有其他O-log-n-的算法吗？" class="headerlink" title="那还有其他O(log(n))的算法吗？"></a>那还有其他O(log(n))的算法吗？</h2><p>经验告诉我们，很多O(log(n))的问题都和二叉树相关，比如各种平衡二叉树，我们能不能用二叉树来解决呢？联想到每个ID都是一个160bit的值，而且我们知道key之间的距离是通过异或来计算的，并且两个key的异或结果大小和他们的共同前缀无关，我们应该想到用Trie树（或者叫前缀树）来解决。事实上，Mainline DHT协议中用的就是Trie树，但是与Trie树又稍微有所不同。在Trie树里边，插入一个key时，我们要比对key的每一个char和Trie里边路径，当不一致时，会立刻分裂成一个子树。但是在这里，当不一致时，不会立刻分裂，而是有一个长度为k的buffer（在Mainline DHT中叫bucket）。分两种情况讨论：</p>
<p>如果bucket长度小于k，那么直接插入bucket就行了。<br>如果bucket长度大于或等于k，又要分两种情况讨论：<br>第一种情况是当前的路径是该节点ID（注意不是要插入的key，是“我”自己的ID）的前缀，那么就分裂，左右子树的key分别是0和1，并且把当前bucket中的节点根据他们的当前char值分到相应的子树的bucket里边。<br>第二种情况是当前路径不是该节点ID的前缀，这种情况下，直接把这个key丢掉。<br>如果还没有理解，你可以参照Kademlia这篇论文上面的图。</p>
<p>插入的时候，复杂度为O(log(n))。查询离key最近的k个节点时，我们可以先找到当前key对应的bucket，如果bucket里边不够k个，那么我们再查找该节点前驱和后继，最后根据他们与key的距离拍一下序即可，平均复杂度也为O(log(n))。这样插入和查询都是O(log(n))。</p>
<p>代码实现你可以查考这里。</p>
<h2 id="节点之间的通信-KRPC"><a href="#节点之间的通信-KRPC" class="headerlink" title="节点之间的通信 - KRPC"></a>节点之间的通信 - KRPC</h2><p>KRPC比较简单，它是一个简单的rpc结构，其是通过UDP传送消息的，报文是由bencode编码的字典。它包含3种消息类型，request、response和error。请求又分为四种：ping，find_node, get_peers, announce_peer。</p>
<h3 id="ping-用来侦探对方是否在线"><a href="#ping-用来侦探对方是否在线" class="headerlink" title="ping 用来侦探对方是否在线"></a>ping 用来侦探对方是否在线</h3><p>find_node 用来查找某一个节点ID为Key的具体信息，信息里包括ip，port，ID<br>get_peers 用来查找某一个资源ID为Key的具体信息，信息里包含可提供下载该资源的ip:port列表<br>announce_peer 用来告诉别人自己可提供某一个资源的下载，让别人把这个消息保存起来。还记得Angelababy那个例子吗？在我得到她的微信号后，我会通知所有我之前问过的人，他们就会把我有Angelababy微信号这个信息保存起来，以后如果有人再问他们有没有Angelababy微信号的话，他们就会告诉那个人我有。BT种子嗅探器就是根据这个来得到消息的，不过得到消息后我们还需要进一步下载。<br>跳出节点，整体看DHT这个哈希表，find_node和get_peers就是我们之前说的get(key)，announce_peer就是set(ke, val)。</p>
<p>剩下的就是具体的消息格式，你可以在官方文档上看到，这里就不搬砖了。</p>
<p>实现KRPC时，需要注意的有以下几点：</p>
<p>每次收到请求或者回复你都需要根据情况更新你的Routing Table，或保存或丢掉。<br>你需要实现transaction，transaction里边要包含你的请求信息以及被请求的ip及端口，只有这样当你收到回复消息时，你才能根据消息的transaction id做出正确的处理。Mainline DHT对于如何实现transaction没有做具体规定。<br>一开始你是不在DHT网络中的，你需要别人把你介绍进去，任何一个在DHT中的人都可以。一般我们可以向 router.bittorrent.com:6881、 dht.transmissionbt.com:6881 等发送find_node请求，然后我们的DHT就可以开始工作了。<br>KRPC的实现你可以参考这里。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DHT整体就是一张哈希表，首先我们本身是里边的一个节点，我们向别人发送krpc find_node或get_peers消息，就是在对这个哈希表执行get(key)操作。向别人发送announce_peer消息，就是在对这个哈希表执行set(key, val)操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前看到 lantern 这个十分火的翻墙工具，其利用了P2P的思想，就想了解一下P2P相关的协议。看了下最流行的BT协议官方文档，就产生了
    
    </summary>
    
    
      <category term="dht" scheme="http://smile921.github.io/tags/dht/"/>
    
      <category term="bt" scheme="http://smile921.github.io/tags/bt/"/>
    
  </entry>
  
  <entry>
    <title>NodeBB 基于 nodejs实现的社区论坛</title>
    <link href="http://smile921.github.io/201608NodeBB-%E5%9F%BA%E4%BA%8E-nodejs%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%A4%BE%E5%8C%BA%E8%AE%BA%E5%9D%9B/"/>
    <id>http://smile921.github.io/201608NodeBB-基于-nodejs实现的社区论坛/</id>
    <published>2016-08-12T04:39:00.000Z</published>
    <updated>2017-03-14T02:12:58.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js-based-forum-software-built-for-the-modern-web-http-www-nodebb-org"><a href="#Node-js-based-forum-software-built-for-the-modern-web-http-www-nodebb-org" class="headerlink" title="Node.js based forum software built for the modern web http://www.nodebb.org"></a>Node.js based forum software built for the modern web <a href="http://www.nodebb.org" target="_blank" rel="external">http://www.nodebb.org</a></h2><p><a href="https://nodebb.org" target="_blank" rel="external"><strong>NodeBB Forum Software</strong></a> is powered by Node.js and built on either a Redis or MongoDB database. It utilizes web sockets for instant interactions and real-time notifications. NodeBB has many modern features out of the box such as social network integration and streaming discussions, while still making sure to be compatible with older browsers.</p>
<p>Additional functionality is enabled through the use of third-party plugins.</p>
<ul>
<li><a href="http://www.nodebb.org/" title="NodeBB" target="_blank" rel="external">Get NodeBB</a></li>
<li><a href="http://community.nodebb.org" target="_blank" rel="external">Demo &amp; Meta Discussion</a></li>
<li><a href="http://docs.nodebb.org" target="_blank" rel="external">Documentation &amp; Installation Instructions</a></li>
<li><a href="https://www.transifex.com/projects/p/nodebb/" target="_blank" rel="external">Help translate NodeBB</a></li>
<li><a href="http://blog.nodebb.org" target="_blank" rel="external">NodeBB Blog</a></li>
<li><a href="https://kiwiirc.com/client/irc.freenode.net/nodebb" target="_blank" rel="external">Join us on IRC</a> - #nodebb on Freenode</li>
<li><a href="http://www.twitter.com/NodeBB/" title="NodeBB Twitter" target="_blank" rel="external">Follow us on Twitter</a></li>
<li><a href="http://www.facebook.com/NodeBB/" title="NodeBB Facebook" target="_blank" rel="external">Like us on Facebook</a></li>
</ul>
<h2 id="NodeBB-Dockerfile"><a href="#NodeBB-Dockerfile" class="headerlink" title="NodeBB Dockerfile"></a>NodeBB Dockerfile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># The base image is the latest 4.x node (LTS) on jessie (debian)</div><div class="line"># -onbuild will install the node dependencies found in the project package.json</div><div class="line"># and copy its content in /usr/src/app, its WORKDIR</div><div class="line">FROM node:4-onbuild</div><div class="line"></div><div class="line">ENV NODE_ENV=production \</div><div class="line">    daemon=false \</div><div class="line">    silent=false</div><div class="line"></div><div class="line"># nodebb setup will ask you for connection information to a redis (default), mongodb then run the forum</div><div class="line"># nodebb upgrade is not included and might be desired</div><div class="line">CMD node app --setup &amp;&amp; npm start</div><div class="line"></div><div class="line"># the default port for NodeBB is exposed outside the container</div><div class="line">EXPOSE 4567</div></pre></td></tr></table></figure>
<h1 id="Example-Forum-user-nodebb"><a href="#Example-Forum-user-nodebb" class="headerlink" title="Example Forum user nodebb"></a>Example Forum user nodebb</h1><p><a href="https://uchain.org/" target="_blank" rel="external">区块链开发者社区</a><br><img src="/images/nodebb-chain.png" alt="nodebb"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Node-js-based-forum-software-built-for-the-modern-web-http-www-nodebb-org&quot;&gt;&lt;a href=&quot;#Node-js-based-forum-software-built-for-the-mode
    
    </summary>
    
    
      <category term="forum" scheme="http://smile921.github.io/tags/forum/"/>
    
      <category term="nodejs" scheme="http://smile921.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>ONLYOFFICE 协同办公</title>
    <link href="http://smile921.github.io/201608ONLYOFFICE-%E5%8D%8F%E5%90%8C%E5%8A%9E%E5%85%AC/"/>
    <id>http://smile921.github.io/201608ONLYOFFICE-协同办公/</id>
    <published>2016-08-11T03:28:16.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="onlyOffice"><a href="#onlyOffice" class="headerlink" title="onlyOffice"></a>onlyOffice</h2><h3 id="Collaborative-system-for-managing-documents-projects-customer-relations-and-emails-in-one-place"><a href="#Collaborative-system-for-managing-documents-projects-customer-relations-and-emails-in-one-place" class="headerlink" title="Collaborative system for managing documents, projects, customer relations and emails in one place"></a>Collaborative system for managing documents, projects, customer relations and emails in one place</h3><ul>
<li>在线编辑文档</li>
<li>客户关系管理</li>
<li>邮件服务</li>
<li>文档管理</li>
<li>项目管理</li>
<li><p>ONLYOFFICE Community Server is a free open source collaborative system developed to manage documents, projects, customer relationship and email correspondence, all in one place.</p>
</li>
<li><p>Cross platform solution: Linux, Windows</p>
</li>
<li>Document management</li>
<li>Integration with Google Drive, Box, Dropbox, OneDrive, OwnCloud</li>
<li>File sharing</li>
<li>Document embedding</li>
<li>Access rights management</li>
<li>Customizable CRM</li>
<li>Web-to-lead form</li>
<li>Invoicing system</li>
<li>Project Management</li>
<li>Gantt Chart</li>
<li>Milestones, task dependencies and subtasks</li>
<li>Time tracking</li>
<li>Automated reports</li>
<li>Blogs, forums, polls, wiki</li>
<li>Calendar</li>
<li>Email Aggregator</li>
<li>People module (employee database)</li>
<li>Instant Messenger</li>
<li>Support of more than 20 languages</li>
</ul>
<h2 id="Running-Docker-Image"><a href="#Running-Docker-Image" class="headerlink" title="Running Docker Image"></a>Running Docker Image</h2><pre><code>sudo docker run -i -t -d -p 80:80 onlyoffice/communityserver
</code></pre><p>This command will install ONLYOFFICE Community Server and all the dependencies it needs.</p>
<h2 id="Configuring-Docker-Image"><a href="#Configuring-Docker-Image" class="headerlink" title="Configuring Docker Image"></a>Configuring Docker Image</h2><p>###Auto-restart</p>
<p>To make Docker auto-restart containers on reboot, please use the –restart=always in the docker run command:</p>
<pre><code>sudo docker run -i -t -d -p 80:80 --restart=always onlyoffice/communityserver
</code></pre><h3 id="Storing-Data"><a href="#Storing-Data" class="headerlink" title="Storing Data"></a>Storing Data</h3><p>All the data are stored in the specially-designated directories, <strong>data volumes</strong>, at the following location:</p>
<ul>
<li><strong>/var/log/onlyoffice</strong> for ONLYOFFICE Community Server logs</li>
<li><strong>/var/www/onlyoffice/Data</strong> for ONLYOFFICE Community Server data</li>
<li><strong>/var/lib/mysql</strong> for MySQL database data</li>
</ul>
<p>To get access to your data from outside the container, you need to mount the volumes. It can be done by specifying the ‘-v’ option in the docker run command.</p>
<pre><code>sudo docker run -i -t -d -p 80:80 \
    -v /app/onlyoffice/CommunityServer/logs:/var/log/onlyoffice  \
    -v /app/onlyoffice/CommunityServer/data:/var/www/onlyoffice/Data  \
    -v /app/onlyoffice/CommunityServer/mysql:/var/lib/mysql  onlyoffice/communityserver
</code></pre><p>Storing the data on the host machine allows you to easily update ONLYOFFICE once the new version is released without losing your data.</p>
<h3 id="Using-MySQL"><a href="#Using-MySQL" class="headerlink" title="Using MySQL"></a>Using MySQL</h3><p>ONLYOFFICE uses <strong>MySQL 5.5</strong> to store its data.</p>
<p>By default the MySQL server is started internally. But you can easily configure the image to use an external MySQL database. </p>
<p>If you have an external MySQL server installed on your machine, execute the following command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo docker run -i -t <span class="_">-d</span> -p 80:80 -p 5222:5222 -p 443:443 \</div><div class="line"><span class="_">-e</span> MYSQL_SERVER_HOST=<span class="string">"127.0.0.1"</span> \</div><div class="line"><span class="_">-e</span> MYSQL_SERVER_PORT=<span class="string">"3306"</span> \</div><div class="line"><span class="_">-e</span> MYSQL_SERVER_DB_NAME=<span class="string">"onlyoffice"</span> \</div><div class="line"><span class="_">-e</span> MYSQL_SERVER_USER=<span class="string">"usr_onlyoffice"</span> \</div><div class="line"><span class="_">-e</span> MYSQL_SERVER_PASS=<span class="string">"onlyoffice123"</span> \</div><div class="line">onlyoffice/communityserver</div></pre></td></tr></table></figure>
<h3 id="Running-ONLYOFFICE-Community-Server-on-Different-Port"><a href="#Running-ONLYOFFICE-Community-Server-on-Different-Port" class="headerlink" title="Running ONLYOFFICE Community Server on Different Port"></a>Running ONLYOFFICE Community Server on Different Port</h3><p>To change the port, use the -p command. E.g.: to make your portal accessible via port 8080 execute the following command:</p>
<pre><code>sudo docker run -i -t -d -p 8080:80 onlyoffice/communityserver
</code></pre><h3 id="Exposing-Additional-Ports"><a href="#Exposing-Additional-Ports" class="headerlink" title="Exposing Additional Ports"></a>Exposing Additional Ports</h3><p>The container ports to be exposed for <strong>incoming connections</strong> are the folloing:</p>
<ul>
<li><strong>80</strong> for plain HTTP</li>
<li><strong>443</strong> when HTTPS is enabled (see below)</li>
<li><strong>5222</strong> for XMPP-compatible instant messaging client (for ONLYOFFICE Talk correct work)</li>
</ul>
<p>You can expose ports by specifying the ‘-p’ option in the docker run command.</p>
<pre><code>sudo docker run -i -t -d -p 80:80  -p 443:443  -p 5222:5222   onlyoffice/communityserver
</code></pre><p>For <strong>outgoing connections</strong> you need to expose the following ports:</p>
<ul>
<li><strong>80</strong> for HTTP</li>
<li><strong>443</strong> for HTTPS</li>
</ul>
<p>Additional ports to be exposed for the mail client correct work:</p>
<ul>
<li><strong>25</strong> for SMTP</li>
<li><strong>465</strong> for SMTPS</li>
<li><strong>143</strong> for IMAP</li>
<li><strong>993</strong> for IMAPS</li>
<li><strong>110</strong> for POP3</li>
<li><strong>995</strong> for POP3S</li>
</ul>
<h3 id="Running-ONLYOFFICE-Community-Server-using-HTTPS"><a href="#Running-ONLYOFFICE-Community-Server-using-HTTPS" class="headerlink" title="Running ONLYOFFICE Community Server using HTTPS"></a>Running ONLYOFFICE Community Server using HTTPS</h3><pre><code>sudo docker run -i -t -d -p 80:80  -p 443:443 \
-v /app/onlyoffice/CommunityServer/data:/var/www/onlyoffice/Data  onlyoffice/communityserver
</code></pre><p>Access to the onlyoffice application can be secured using SSL so as to prevent unauthorized access. While a CA certified SSL certificate allows for verification of trust via the CA, a self signed certificates can also provide an equal level of trust verification as long as each client takes some additional steps to verify the identity of your website. Below the instructions on achieving this are provided.</p>
<p>To secure the application via SSL basically two things are needed:</p>
<ul>
<li><strong>Private key (.key)</strong></li>
<li><strong>SSL certificate (.crt)</strong></li>
</ul>
<p>So you need to create and install the following files:</p>
<pre><code>/app/onlyoffice/CommunityServer/data/certs/onlyoffice.key
/app/onlyoffice/CommunityServer/data/certs/onlyoffice.crt
</code></pre><p>When using CA certified certificates, these files are provided to you by the CA. When using self-signed certificates you need to generate these files yourself. Skip the following section if you are have CA certified SSL certificates.</p>
<h4 id="Generation-of-Self-Signed-Certificates"><a href="#Generation-of-Self-Signed-Certificates" class="headerlink" title="Generation of Self Signed Certificates"></a>Generation of Self Signed Certificates</h4><p>Generation of self-signed SSL certificates involves a simple 3 step procedure.</p>
<p><strong>STEP 1</strong>: Create the server private key</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out onlyoffice.key 2048</div></pre></td></tr></table></figure>
<p><strong>STEP 2</strong>: Create the certificate signing request (CSR)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -key onlyoffice.key -out onlyoffice.csr</div></pre></td></tr></table></figure>
<p><strong>STEP 3</strong>: Sign the certificate using the private key and CSR</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -days 365 -in onlyoffice.csr -signkey onlyoffice.key -out onlyoffice.crt</div></pre></td></tr></table></figure>
<p>You have now generated an SSL certificate that’s valid for 365 days.</p>
<h4 id="Strengthening-the-server-security"><a href="#Strengthening-the-server-security" class="headerlink" title="Strengthening the server security"></a>Strengthening the server security</h4><p>This section provides you with instructions to <a href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html" target="_blank" rel="external">strengthen your server security</a>.<br>To achieve this you need to generate stronger DHE parameters.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl dhparam -out dhparam.pem 2048</div></pre></td></tr></table></figure>
<h4 id="Installation-of-the-SSL-Certificates"><a href="#Installation-of-the-SSL-Certificates" class="headerlink" title="Installation of the SSL Certificates"></a>Installation of the SSL Certificates</h4><p>Out of the four files generated above, you need to install the <code>onlyoffice.key</code>, <code>onlyoffice.crt</code> and <code>dhparam.pem</code> files at the onlyoffice server. The CSR file is not needed, but do make sure you safely backup the file (in case you ever need it again).</p>
<p>The default path that the onlyoffice application is configured to look for the SSL certificates is at <code>/var/www/onlyoffice/Data/certs</code>, this can however be changed using the <code>SSL_KEY_PATH</code>, <code>SSL_CERTIFICATE_PATH</code> and <code>SSL_DHPARAM_PATH</code> configuration options.</p>
<p>The <code>/var/www/onlyoffice/Data/</code> path is the path of the data store, which means that you have to create a folder named certs inside <code>/app/onlyoffice/CommunityServer/data/</code> and copy the files into it and as a measure of security you will update the permission on the <code>onlyoffice.key</code> file to only be readable by the owner.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p /app/onlyoffice/CommunityServer/data/certs</div><div class="line">cp onlyoffice.key /app/onlyoffice/CommunityServer/data/certs/</div><div class="line">cp onlyoffice.crt /app/onlyoffice/CommunityServer/data/certs/</div><div class="line">cp dhparam.pem /app/onlyoffice/CommunityServer/data/certs/</div><div class="line">chmod 400 /app/onlyoffice/CommunityServer/data/certs/onlyoffice.key</div></pre></td></tr></table></figure>
<p>You are now just one step away from having our application secured.</p>
<h4 id="Available-Configuration-Parameters"><a href="#Available-Configuration-Parameters" class="headerlink" title="Available Configuration Parameters"></a>Available Configuration Parameters</h4><p><em>Please refer the docker run command options for the <code>--env-file</code> flag where you can specify all required environment variables in a single file. This will save you from writing a potentially long docker run command.</em></p>
<p>Below is the complete list of parameters that can be set using environment variables.</p>
<ul>
<li><strong>ONLYOFFICE_HTTPS_HSTS_ENABLED</strong>: Advanced configuration option for turning off the HSTS configuration. Applicable only when SSL is in use. Defaults to <code>true</code>.</li>
<li><strong>ONLYOFFICE_HTTPS_HSTS_MAXAGE</strong>: Advanced configuration option for setting the HSTS max-age in the onlyoffice nginx vHost configuration. Applicable only when SSL is in use. Defaults to <code>31536000</code>.</li>
<li><strong>SSL_CERTIFICATE_PATH</strong>: The path to the SSL certificate to use. Defaults to <code>/var/www/onlyoffice/Data/certs/onlyoffice.crt</code>.</li>
<li><strong>SSL_KEY_PATH</strong>: The path to the SSL certificate’s private key. Defaults to <code>/var/www/onlyoffice/Data/certs/onlyoffice.key</code>.</li>
<li><strong>SSL_DHPARAM_PATH</strong>: The path to the Diffie-Hellman parameter. Defaults to <code>/var/www/onlyoffice/Data/certs/dhparam.pem</code>.</li>
<li><strong>SSL_VERIFY_CLIENT</strong>: Enable verification of client certificates using the <code>CA_CERTIFICATES_PATH</code> file. Defaults to <code>false</code></li>
<li><strong>MYSQL_SERVER_HOST</strong>: The IP address or the name of the host where the server is running.</li>
<li><strong>MYSQL_SERVER_PORT</strong>: The port number.</li>
<li><strong>MYSQL_SERVER_DB_NAME</strong>: The name of a MySQL database to be created on image startup.</li>
<li><strong>MYSQL_SERVER_USER</strong>: The new user name with superuser permissions for the MySQL account.</li>
<li><strong>MYSQL_SERVER_PASS</strong>: The password set for the MySQL account. </li>
</ul>
<h2 id="Installing-ONLYOFFICE-Community-Server-integrated-with-Document-and-Mail-Servers"><a href="#Installing-ONLYOFFICE-Community-Server-integrated-with-Document-and-Mail-Servers" class="headerlink" title="Installing ONLYOFFICE Community Server integrated with Document and Mail Servers"></a>Installing ONLYOFFICE Community Server integrated with Document and Mail Servers</h2><p>ONLYOFFICE Community Server is a part of ONLYOFFICE Community Edition that comprises also Document Server and Mail Server. To install them, follow these easy steps:</p>
<p><strong>STEP 1</strong>: Create the ‘onlyoffice’ network.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker network create --driver bridge onlyoffice</div></pre></td></tr></table></figure>
<p>Than launch containers on it using the ‘docker run –net onlyoffice’ option:</p>
<p><strong>STEP 1</strong>: Install ONLYOFFICE Document Server.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo docker run --net onlyoffice -i -t <span class="_">-d</span> --restart=always --name onlyoffice-document-server \</div><div class="line">true-v /app/onlyoffice/DocumentServer/data:/var/www/onlyoffice/Data \</div><div class="line">true-v /app/onlyoffice/DocumentServer/logs:/var/<span class="built_in">log</span>/onlyoffice \</div><div class="line">trueonlyoffice/documentserver</div></pre></td></tr></table></figure>
<p><strong>STEP 2</strong>: Install ONLYOFFICE Mail Server. </p>
<p>For the mail server correct work you need to specify its hostname ‘yourdomain.com’.<br>To learn more, refer to the <a href="https://github.com/ONLYOFFICE/Docker-MailServer" title="ONLYOFFICE Mail Server documentation" target="_blank" rel="external">ONLYOFFICE Mail Server documentation</a>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo docker run --net onlyoffice --privileged -i -t <span class="_">-d</span> --restart=always --name onlyoffice-mail-server \</div><div class="line">true-p 25:25 -p 143:143 -p 587:587 \</div><div class="line">true-v /app/onlyoffice/MailServer/data:/var/vmail \</div><div class="line">true-v /app/onlyoffice/MailServer/data/certs:/etc/pki/tls/mailserver \</div><div class="line">true-v /app/onlyoffice/MailServer/logs:/var/<span class="built_in">log</span> \</div><div class="line">true-v /app/onlyoffice/MailServer/mysql:/var/lib/mysql \</div><div class="line">true-h yourdomain.com \</div><div class="line">trueonlyoffice/mailserver</div></pre></td></tr></table></figure>
<p><strong>STEP 3</strong>: Install ONLYOFFICE Community Server</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo docker run --net onlyoffice -i -t <span class="_">-d</span> --restart=always --name onlyoffice-community-server \</div><div class="line">true-p 80:80 -p 5222:5222 -p 443:443 \</div><div class="line">true-v /app/onlyoffice/CommunityServer/data:/var/www/onlyoffice/Data \</div><div class="line">true-v /app/onlyoffice/CommunityServer/mysql:/var/lib/mysql \</div><div class="line">true-v /app/onlyoffice/CommunityServer/logs:/var/<span class="built_in">log</span>/onlyoffice \</div><div class="line">true-v /app/onlyoffice/DocumentServer/data:/var/www/onlyoffice/DocumentServerData \</div><div class="line">true<span class="_">-e</span> DOCUMENT_SERVER_PORT_80_TCP_ADDR=onlyoffice-document-server \</div><div class="line">true<span class="_">-e</span> MAIL_SERVER_DB_HOST=onlyoffice-mail-server \</div><div class="line">trueonlyoffice/communityserver</div></pre></td></tr></table></figure>
<p>Alternatively, you can use an automatic installation script to install the whole ONLYOFFICE Community Edition at once. For the mail server correct work you need to specify its hostname ‘yourdomain.com’.</p>
<p><strong>STEP 1</strong>: Download the Community Edition Docker script file</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.onlyoffice.com/install/opensource-install.sh</div></pre></td></tr></table></figure>
<p><strong>STEP 2</strong>: Install ONLYOFFICE Community Edition executing the following command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash opensource-install.sh -md yourdomain.com</div></pre></td></tr></table></figure>
<p>Or, use <a href="https://docs.docker.com/compose/install" title="docker-compose" target="_blank" rel="external">docker-compose</a>. For the mail server correct work you need to specify its hostname ‘yourdomain.com’. Assuming you have docker-compose installed, execute the following command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://raw.githubusercontent.com/ONLYOFFICE/Docker-CommunityServer/master/docker-compose.yml</div><div class="line">docker-compose up <span class="_">-d</span></div></pre></td></tr></table></figure>
<h2 id="Upgrading-ONLYOFFICE-Community-Server"><a href="#Upgrading-ONLYOFFICE-Community-Server" class="headerlink" title="Upgrading ONLYOFFICE Community Server"></a>Upgrading ONLYOFFICE Community Server</h2><p>To upgrade to a newer release, please follow there easy steps:</p>
<p><strong>STEP 1</strong>: Make sure that all the container volumes are mounted following the <strong>Storing Data</strong> section instructions:</p>
<pre><code>sudo docker inspect --format=&apos;{{range $p,$conf:=.HostConfig.Binds}}{{$conf}};{{end}}&apos; {{COMMUNITY_SERVER_ID}} 
</code></pre><p>where<br>     stands for a container name or ID</p>
<p><strong>STEP 2</strong> Remove the current container<br>    sudo docker rm -f </p>
<p><strong>STEP 3</strong> Remove the current image<br>    sudo docker rmi -f $(sudo docker images | grep onlyoffice/communityserver | awk ‘{ print $3 }’)</p>
<p><strong>STEP 4</strong> Run the new image with the same map paths</p>
<pre><code>sudo docker run -i -t -d -p 80:80 \
-v /app/onlyoffice/CommunityServer/logs:/var/log/onlyoffice  \
-v /app/onlyoffice/CommunityServer/data:/var/www/onlyoffice/Data  \
-v /app/onlyoffice/CommunityServer/mysql:/var/lib/mysql  onlyoffice/communityserver
</code></pre><h2 id="Project-Information"><a href="#Project-Information" class="headerlink" title="Project Information"></a>Project Information</h2><p>Official website: <a href="http://onlyoffice.org" title="http://www.onlyoffice.org" target="_blank" rel="external">http://www.onlyoffice.org</a></p>
<p>Code repository: <a href="https://github.com/ONLYOFFICE/CommunityServer" title="https://github.com/ONLYOFFICE/CommunityServer" target="_blank" rel="external">https://github.com/ONLYOFFICE/CommunityServer</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;onlyOffice&quot;&gt;&lt;a href=&quot;#onlyOffice&quot; class=&quot;headerlink&quot; title=&quot;onlyOffice&quot;&gt;&lt;/a&gt;onlyOffice&lt;/h2&gt;&lt;h3 id=&quot;Collaborative-system-for-managing
    
    </summary>
    
    
      <category term="docker" scheme="http://smile921.github.io/tags/docker/"/>
    
      <category term="office" scheme="http://smile921.github.io/tags/office/"/>
    
  </entry>
  
  <entry>
    <title>docker hub 国内加速</title>
    <link href="http://smile921.github.io/201608docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/"/>
    <id>http://smile921.github.io/201608docker-hub-国内加速/</id>
    <published>2016-08-10T07:40:01.000Z</published>
    <updated>2017-03-13T05:49:30.782Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.daocloud.io/mirror" target="_blank" rel="external">DaoCloud 加速器</a>是广受欢迎的 Docker 工具，解决了国内用户访问 Docker Hub 缓慢的问题。DaoCloud 加速器结合国内的 CDN 服务与协议层优化，成倍的提升了下载速度。</p>
<h1 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h1><p>请先确定您的 Docker 版本在 1.8 及以上。<br>登陆<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">加速器页面</a>可以获取 mirror 地址。<br>配置好后，您可以像往常一样使用docker pull命令，在拉取 Docker Hub 镜像时会自动采用加速器的镜像服务。</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="自动配置-Docker-加速器"><a href="#自动配置-Docker-加速器" class="headerlink" title="自动配置 Docker 加速器"></a>自动配置 Docker 加速器</h3><p><em>适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://aa62783f.m.daocloud.io</div></pre></td></tr></table></figure>
<p>该脚本可以将 –registry-mirror 加入到你的 Docker 配置文件 /etc/default/docker 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7，其他版本可能有细微不同。更多详情请访问文档。</p>
<p>登陆后参考<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">配置命令</a><br>此命令会帮助您配置 registry-mirror 并重启 Docker Daemon。</p>
<h3 id="手动配置-Docker-加速器"><a href="#手动配置-Docker-加速器" class="headerlink" title="手动配置 Docker 加速器"></a>手动配置 Docker 加速器</h3><p><em>适用于各种 Linux 发行版</em></p>
<p>您可以找到 Docker 配置文件，一般配置文件在<figure class="highlight plain"><figcaption><span>，在配置文件中的```DOCKER_OPTS```加入</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CentOS 7  在 /lib/systemd/system/docker.service 中</div></pre></td></tr></table></figure></p>
<p>–registry-mirror=加速地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">重启Docker，一般可以用下面命令重启</div></pre></td></tr></table></figure></p>
<p>service docker restart<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.daocloud.io/mirror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DaoCloud 加速器&lt;/a&gt;是广受欢迎的 Docker 工具，解决了国内用户访问 Docker Hub 缓慢的问题。DaoCl
    
    </summary>
    
    
      <category term="docker" scheme="http://smile921.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Telegram  一款开源简洁的IM</title>
    <link href="http://smile921.github.io/201608Telegram-%E4%B8%80%E6%AC%BE%E5%BC%80%E6%BA%90%E7%AE%80%E6%B4%81%E7%9A%84IM/"/>
    <id>http://smile921.github.io/201608Telegram-一款开源简洁的IM/</id>
    <published>2016-08-09T01:18:37.000Z</published>
    <updated>2017-03-14T02:12:22.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Telegram-的诞生"><a href="#Telegram-的诞生" class="headerlink" title="Telegram 的诞生"></a>Telegram 的诞生</h2><p>Telegram 是俄罗斯兄弟帕维尔·杜罗夫(Pavel Durov)与尼古拉·杜罗夫(Nikolai Durov)于2013年创建的，他们也是俄罗斯最大社交网站VKontakte的创始人。当VKontakte引发俄罗斯政府关注后，帕维尔逃离俄罗斯。当他与正与圣彼得堡家中与特警队对峙的兄弟尼古拉通话时，他想到了创建Telegram的主意。他说 ：“我意识到，我没有与兄弟通信的安全方式，这就是Telegram诞生的初衷。</p>
<h2 id="可能是最注重隐私的通讯应用"><a href="#可能是最注重隐私的通讯应用" class="headerlink" title="可能是最注重隐私的通讯应用"></a>可能是最注重隐私的通讯应用</h2><p>都说在互联网上的东西就枉谈隐私了，大多数人对信息安全的概念是很弱的。Telegram 官方明确表示自己的态度：大型互联网公司总是想方设法让公众相信一种观点，保护隐私就是隐藏自己的线上信息不让身边的人知道，而实际上与此同时将大量的用户个人数据以某种形式变卖。而 Telegram 要做的是切实避免这样的情况，技术上的细则可以在网页上看到相关详尽的解说。</p>
<p>当然这些响亮的名号在日常使用中并不能轻易体验到，抛开技术层面的说明不谈，光是其悬赏 30 万美元给能够黑进应用的人，且至今无人能破这一点，也值得人对其报以关注。此外，用户还可以设置在一定时间内不登陆则自动销毁账号和一切信息，不费吹灰之力斩断后顾之忧；陌生人之间可以通过搜索 Username 进行临时会话，而不必暴露电话号码，只有主动共享手机号后才会添加进通讯录。</p>
<p>比起其他应用，Telegram 的会话选项多样，除正常会话和刚才提到的陌生人临时会话以外，还有私密会话。在此会话中可以对信息设置阅后即焚计时器，自定义多少时间后销毁信息，尤其是就算对方截屏了应用也会自动提醒这事，简直和微信「对方撤回一条信息」一样温暖人心。<br><img src="/images/telegram.png" alt="telegram"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Telegram-的诞生&quot;&gt;&lt;a href=&quot;#Telegram-的诞生&quot; class=&quot;headerlink&quot; title=&quot;Telegram 的诞生&quot;&gt;&lt;/a&gt;Telegram 的诞生&lt;/h2&gt;&lt;p&gt;Telegram 是俄罗斯兄弟帕维尔·杜罗夫(Pavel D
    
    </summary>
    
    
      <category term="IM" scheme="http://smile921.github.io/tags/IM/"/>
    
      <category term="telegram" scheme="http://smile921.github.io/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>API Documentation Browser</title>
    <link href="http://smile921.github.io/201608API-Documentation-Browser/"/>
    <id>http://smile921.github.io/201608API-Documentation-Browser/</id>
    <published>2016-08-08T01:06:41.000Z</published>
    <updated>2017-03-13T05:49:30.766Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://devdocs.io" target="_blank" rel="external">DevDocs</a><br><a href="https://github.com/Thibaut/devdocs" target="_blank" rel="external">DevDocs github</a></p>
<h2 id="run-devdocs-in-docker"><a href="#run-devdocs-in-docker" class="headerlink" title="run devdocs in docker"></a>run devdocs in docker</h2><h3 id="First-build-the-image"><a href="#First-build-the-image" class="headerlink" title="First, build the image"></a>First, build the image</h3><pre><code>git clone https://github.com/Thibaut/devdocs.git &amp;&amp; cd devdocs 
docker build -t thibaut/devdocs . 
</code></pre><h3 id="Finally-start-a-DevDocs-container-access-http-localhost-9292"><a href="#Finally-start-a-DevDocs-container-access-http-localhost-9292" class="headerlink" title="Finally, start a DevDocs container (access http://localhost:9292)"></a>Finally, start a DevDocs container (access <a href="http://localhost:9292" target="_blank" rel="external">http://localhost:9292</a>)</h3><pre><code>docker run --name devdocs -d -p 9292:9292 thibaut/devdocs 
</code></pre><hr>
<h2 id="Sinatra：一个优雅地包装了Web开发的DSL"><a href="#Sinatra：一个优雅地包装了Web开发的DSL" class="headerlink" title="Sinatra：一个优雅地包装了Web开发的DSL"></a>Sinatra：一个优雅地包装了Web开发的DSL</h2><p>你相信用100行代码可以实现一个博客吗？用Sinatra框架就可以做到。下面就是这样子的一个Web应用： </p>
<pre><code>Reprise - A Minimalistic Blog 
</code></pre><p>这个应用的代码：点这里查看 </p>
<p>一个简单的hello world的web应用要写多少代码？用Sinatra只需5行代码： </p>
<pre><code>require &apos;rubygems&apos; 
require &apos;sinatra&apos; 

get &apos;/&apos; do 
&apos;Hello World&apos; 
end 
</code></pre><p>安装方法： </p>
<pre><code>$ gem install sinatra 
$ ruby -rubygems hi.rb 
</code></pre><hr>
<p>Aaron Patterson和Mike Dalessio开发了一个新的Ruby解析HTML/XML的ruby库 － Nokogiri。他的速度比目前应用的最广泛的Hpricot还要快许多。经过Benchmark测试表明，Nokogiri在加载XML文档的速度是Hpricot的7倍，在XPATH搜索的速度是Hpricot的5倍，而在CSS选择器的搜索上面是Hpricot的1.62倍。 </p>
<h2 id="因此Nokogiri被认为有可能取代Hpricot的新一代Ruby的解析库，他能够解析HTML-XML文件，能够提供XPATH支持，CSS选择器支持。安装Nokogiri的办法很简单：-gem-install-nokogiri"><a href="#因此Nokogiri被认为有可能取代Hpricot的新一代Ruby的解析库，他能够解析HTML-XML文件，能够提供XPATH支持，CSS选择器支持。安装Nokogiri的办法很简单：-gem-install-nokogiri" class="headerlink" title="因此Nokogiri被认为有可能取代Hpricot的新一代Ruby的解析库，他能够解析HTML/XML文件，能够提供XPATH支持，CSS选择器支持。安装Nokogiri的办法很简单： gem install nokogiri "></a>因此Nokogiri被认为有可能取代Hpricot的新一代Ruby的解析库，他能够解析HTML/XML文件，能够提供XPATH支持，CSS选择器支持。安装Nokogiri的办法很简单： gem install nokogiri </h2><h2 id="dash"><a href="#dash" class="headerlink" title="dash"></a>dash</h2><p>作为一名死coder，每天最常见的动作就是查看各种API文档，你一定也有过同时打开N个窗口（HTML、PDF、CHM），不停的在编辑器与文档之间切换的感受吧？怎么说呢，其实我很讨厌这种枯燥无味的动作，那么如何才能提高效率，减少无用功呢？下面就给大家介绍一款非常好用的Mac小工具：Dash，相比这个英文名，我跟喜欢叫它“叮当猫”，嘿嘿。 </p>
<p>官方用一句话就概括了它的用途：Dash是一个API文档浏览器（ API Documentation Browser），以及代码片段管理工具（Code Snippet Manager）。你没看错，它就只有这两个功能，但确实是程序员（至少对于我来说）最为关心的特性，自己之前也用过了不少类似的工具，可以毫不夸张地说，Dash是它们之中做的最好的一个！<br>强悍的API文档浏览、搜索功能 </p>
<p>想必这个功能是大家最常用的了吧，每天要反复查看、搜索那么多的API细节，没有一个好工具，单靠自己的双手如何应付得来？窗口不停的切来切去，很烦啊！Dash采用集成单一窗口的方式，很好的解决了这个问题</p>
<h2 id="DevDocs"><a href="#DevDocs" class="headerlink" title="DevDocs "></a><a href="http://devdocs.io" target="_blank" rel="external">DevDocs</a> <a href="https://travis-ci.org/Thibaut/devdocs" target="_blank" rel="external"><img src="https://travis-ci.org/Thibaut/devdocs.svg?branch=master" alt="Build Status"></a></h2><p>DevDocs combines multiple API documentations in a fast, organized, and searchable interface.</p>
<ul>
<li>Created by <a href="http://thibaut.me" target="_blank" rel="external">Thibaut Courouble</a></li>
</ul>
<p>Keep track of development news:</p>
<ul>
<li>Watch the repository on <a href="https://github.com/Thibaut/devdocs/subscription" target="_blank" rel="external">GitHub</a></li>
<li>Follow <a href="https://twitter.com/DevDocs" target="_blank" rel="external">@DevDocs</a> on Twitter</li>
<li>Join the <a href="https://groups.google.com/d/forum/devdocs" target="_blank" rel="external">mailing list</a></li>
</ul>
<p>DevDocs is free and open source. If you like it, please consider supporting my work on <a href="https://gratipay.com/devdocs/" target="_blank" rel="external">Gratipay</a>. Thanks!</p>
<p><strong>Table of Contents:</strong> <a href="#quick-start">Quick Start</a> · <a href="#vision">Vision</a> · <a href="#app">App</a> · <a href="#scraper">Scraper</a> · <a href="#available-commands">Commands</a> · <a href="#contributing">Contributing</a> · <a href="#copyright--license">License</a> · <a href="#questions">Questions?</a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Unless you wish to contribute to the project, I recommend using the hosted version at <a href="http://devdocs.io" target="_blank" rel="external">devdocs.io</a>. It’s up-to-date and works offline out-of-the-box.</p>
<p>DevDocs is made of two pieces: a Ruby scraper that generates the documentation and metadata, and a JavaScript app powered by a small Sinatra app.</p>
<p>DevDocs requires Ruby 2.3.0, libcurl, and a JavaScript runtime supported by <a href="https://github.com/rails/execjs#readme" target="_blank" rel="external">ExecJS</a> (included in OS X and Windows; <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> on Linux). Once you have these installed, run the following commands:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/Thibaut/devdocs.git &amp;&amp; cd devdocs</div><div class="line">gem install bundler</div><div class="line">bundle install</div><div class="line">thor docs:download --default</div><div class="line">rackup</div></pre></td></tr></table></figure>
<p>Finally, point your browser at <a href="http://localhost:9292" target="_blank" rel="external">localhost:9292</a> (the first request will take a few seconds to compile the assets). You’re all set.</p>
<p>The <code>thor docs:download</code> command is used to download pre-generated documentations from DevDocs’s servers (e.g. <code>thor docs:download html css</code>). You can see the list of available documentations and versions by running <code>thor docs:list</code>. To update all downloaded documentations, run <code>thor docs:download --installed</code>.</p>
<p><strong>Note:</strong> there is currently no update mechanism other than <code>git pull origin master</code> to update the code and <code>thor docs:download --installed</code> to download the latest version of the docs. To stay informed about new releases, be sure to <a href="https://github.com/Thibaut/devdocs/subscription" target="_blank" rel="external">watch</a> this repository.</p>
<p>Alternatively, DevDocs may be started as a Docker container:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># First, build the image</div><div class="line">git clone https://github.com/Thibaut/devdocs.git &amp;&amp; cd devdocs</div><div class="line">docker build -t thibaut/devdocs .</div><div class="line"></div><div class="line"># Finally, start a DevDocs container (access http://localhost:9292)</div><div class="line">docker run --name devdocs -d -p 9292:9292 thibaut/devdocs</div></pre></td></tr></table></figure>
<h2 id="Vision"><a href="#Vision" class="headerlink" title="Vision"></a>Vision</h2><p>DevDocs aims to make reading and searching reference documentation fast, easy and enjoyable.</p>
<p>The app’s main goals are to: keep load times as short as possible; improve the quality, speed, and order of search results; maximize the use of caching and other performance optimizations; maintain a clean and readable user interface; be fully functional offline; support full keyboard navigation; reduce “context switch” by using a consistent typography and design across all documentations; reduce clutter by focusing on a specific category of content (API/reference) and indexing only the minimum useful to most developers.</p>
<p><strong>Note:</strong> DevDocs is neither a programming guide nor a search engine. All our content is pulled from third-party sources and the project doesn’t intend to compete with full-text search engines. Its backbone is metadata; each piece of content is identified by a unique, “obvious” and short string. Tutorials, guides and other content that don’t meet this requirement are outside the scope of the project.</p>
<h2 id="App"><a href="#App" class="headerlink" title="App"></a>App</h2><p>The web app is all client-side JavaScript, written in <a href="http://coffeescript.org" target="_blank" rel="external">CoffeeScript</a>, and powered by a small <a href="http://www.sinatrarb.com" target="_blank" rel="external">Sinatra</a>/<a href="https://github.com/rails/sprockets" target="_blank" rel="external">Sprockets</a> application. It relies on files generated by the <a href="#scraper">scraper</a>.</p>
<p>Many of the code’s design decisions were driven by the fact that the app uses XHR to load content directly into the main frame. This includes stripping the original documents of most of their HTML markup (e.g. scripts and stylesheets) to avoid polluting the main frame, and prefixing all CSS class names with an underscore to prevent conflicts.</p>
<p>Another driving factor is performance and the fact that everything happens in the browser. <code>applicationCache</code> (which comes with its own set of constraints) and <code>localStorage</code> are used to speed up the boot time, while memory consumption is kept in check by allowing the user to pick his/her own set of documentations. The search algorithm is kept simple because it needs to be fast even searching through 100,000 strings.</p>
<p>DevDocs being a developer tool, the browser requirements are high:</p>
<ol>
<li>On the desktop:<ul>
<li>Recent version of Chrome, Firefox, or Opera</li>
<li>Safari 8+</li>
<li>IE / Edge 10+</li>
</ul>
</li>
<li>On mobile:<ul>
<li>iOS 8+</li>
<li>Android 4.1+</li>
<li>Windows Phone 8+</li>
</ul>
</li>
</ol>
<p>This allows the code to take advantage of the latest DOM and HTML5 APIs and make developing DevDocs a lot more fun!</p>
<h2 id="Scraper"><a href="#Scraper" class="headerlink" title="Scraper"></a>Scraper</h2><p>The scraper is responsible for generating the documentation and index files (metadata) used by the <a href="#app">app</a>. It’s written in Ruby under the <code>Docs</code> module.</p>
<p>There are currently two kinds of scrapers: <code>UrlScraper</code> which downloads files via HTTP and <code>FileScraper</code> which reads them from the local filesystem. They both make copies of HTML documents, recursively following links that match a set of rules and applying all sorts of modifications along the way, in addition to building an index of the files and their metadata. Documents are parsed using <a href="http://nokogiri.org" target="_blank" rel="external">Nokogiri</a>.</p>
<p>Modifications made to each document include:</p>
<ul>
<li>removing content such as the document structure (<code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, etc.), comments, empty nodes, etc.</li>
<li>fixing links (e.g. to remove duplicates)</li>
<li>replacing all external (not scraped) URLs with their fully qualified counterpart</li>
<li>replacing all internal (scraped) URLs with their unqualified and relative counterpart</li>
<li>adding content, such as a title and link to the original document</li>
</ul>
<p>These modifications are applied via a set of filters using the <a href="https://github.com/jch/html-pipeline" target="_blank" rel="external">HTML::Pipeline</a> library. Each scraper includes filters specific to itself, one of which is tasked with figuring out the pages’ metadata.</p>
<p>The end result is a set of normalized HTML partials and two JSON files (index + offline data). Because the index files are loaded separately by the <a href="#app">app</a> following the user’s preferences, the scraper also creates a JSON manifest file containing information about the documentations currently available on the system (such as their name, version, update date, etc.).</p>
<p>More information about scrapers and filters is available on the <a href="https://github.com/Thibaut/devdocs/wiki" target="_blank" rel="external">wiki</a>.</p>
<h2 id="Available-Commands"><a href="#Available-Commands" class="headerlink" title="Available Commands"></a>Available Commands</h2><p>The command-line interface uses <a href="http://whatisthor.com" target="_blank" rel="external">Thor</a>. To see all commands and options, run <code>thor list</code> from the project’s root.</p>
<p>```</p>
<h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><p>rackup              # Start the server (ctrl+c to stop)<br>rackup –help       # List server options</p>
<h1 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h1><p>thor docs:list      # List available documentations<br>thor docs:download  # Download one or more documentations<br>thor docs:manifest  # Create the manifest file used by the app<br>thor docs:generate  # Generate/scrape a documentation<br>thor docs:page      # Generate/scrape a documentation page<br>thor docs:package   # Package a documentation for use with docs:download<br>thor docs:clean     # Delete documentation packages</p>
<h1 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h1><p>thor console        # Start a REPL<br>thor console:docs   # Start a REPL in the “Docs” module<br>Note: tests can be run quickly from within the console using the “test” command. Run “help test”<br>for usage instructions.</p>
<h1 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h1><p>thor test:all       # Run all tests<br>thor test:docs      # Run “Docs” tests<br>thor test:app       # Run “App” tests</p>
<h1 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h1><p>thor assets:compile # Compile assets (not required in development mode)<br>thor assets:clean   # Clean old assets</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://devdocs.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevDocs&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/Thibaut/devdocs&quot; target=&quot;_blank&quot; re
    
    </summary>
    
    
      <category term="api" scheme="http://smile921.github.io/tags/api/"/>
    
      <category term="devdoc" scheme="http://smile921.github.io/tags/devdoc/"/>
    
      <category term="ruby" scheme="http://smile921.github.io/tags/ruby/"/>
    
  </entry>
  
</feed>
